{"version":3,"file":"Amount.cjs","sources":["../../../src/types/Amount.ts"],"sourcesContent":["import { LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { Opaque } from '@/utils';\nimport { CurrencyMismatchError, UnexpectedCurrencyError } from '@/errors';\n\nexport type Amount = {\n  basisPoints: BasisPoints;\n  currency: Currency;\n};\n\nexport type BasisPoints = Opaque<BN, 'BasisPoints'>;\n\nexport type Currency = {\n  symbol: string;\n  decimals: number;\n  namespace?: 'spl-token';\n};\n\nexport const SOL = {\n  symbol: 'SOL',\n  decimals: 9,\n};\n\nexport const USD = {\n  symbol: 'USD',\n  decimals: 2,\n};\n\nexport const amount = (\n  basisPoints: number | BN,\n  currency: Currency\n): Amount => {\n  return {\n    basisPoints: toBasisPoints(basisPoints),\n    currency,\n  };\n};\n\nexport const lamports = (lamports: number | BN): Amount => {\n  return amount(lamports, SOL);\n};\n\nexport const sol = (sol: number): Amount => {\n  return lamports(sol * LAMPORTS_PER_SOL);\n};\n\nexport const usd = (usd: number): Amount => {\n  return amount(usd * 100, USD);\n};\n\nexport const toBasisPoints = (value: number | BN): BasisPoints => {\n  return new BN(value) as BasisPoints;\n};\n\nexport const isSol = (currencyOrAmount: Currency | Amount): boolean => {\n  return sameCurrencies(currencyOrAmount, SOL);\n};\n\nexport const sameCurrencies = (\n  left: Currency | Amount,\n  right: Currency | Amount\n) => {\n  if ('currency' in left) {\n    left = left.currency;\n  }\n\n  if ('currency' in right) {\n    right = right.currency;\n  }\n\n  return (\n    left.symbol === right.symbol &&\n    left.decimals === right.decimals &&\n    left.namespace === right.namespace\n  );\n};\n\nexport const assertCurrency = (\n  actual: Currency | Amount,\n  expected: Currency\n) => {\n  if ('currency' in actual) {\n    actual = actual.currency;\n  }\n\n  if (!sameCurrencies(actual, expected)) {\n    throw new UnexpectedCurrencyError(actual, expected);\n  }\n};\n\nexport const assertSol = (actual: Currency | Amount) => {\n  assertCurrency(actual, SOL);\n};\n\nexport const assertSameCurrencies = (\n  left: Currency | Amount,\n  right: Currency | Amount,\n  operation?: string\n) => {\n  if ('currency' in left) {\n    left = left.currency;\n  }\n\n  if ('currency' in right) {\n    right = right.currency;\n  }\n\n  if (!sameCurrencies(left, right)) {\n    throw new CurrencyMismatchError(left, right, operation);\n  }\n};\n\nexport const addAmounts = (left: Amount, right: Amount): Amount => {\n  assertSameCurrencies(left, right, 'add');\n\n  return amount(left.basisPoints.add(right.basisPoints), left.currency);\n};\n\nexport const subtractAmounts = (left: Amount, right: Amount): Amount => {\n  assertSameCurrencies(left, right, 'subtract');\n\n  return amount(left.basisPoints.sub(right.basisPoints), left.currency);\n};\n\nexport const multiplyAmount = (left: Amount, multiplier: number): Amount => {\n  return amount(left.basisPoints.muln(multiplier), left.currency);\n};\n\nexport const divideAmount = (left: Amount, divisor: number): Amount => {\n  return amount(left.basisPoints.divn(divisor), left.currency);\n};\n\nexport const compareAmounts = (left: Amount, right: Amount): -1 | 0 | 1 => {\n  assertSameCurrencies(left, right, 'compare');\n\n  return left.basisPoints.cmp(right.basisPoints);\n};\n\nexport const isEqualToAmount = (left: Amount, right: Amount): boolean =>\n  compareAmounts(left, right) === 0;\n\nexport const isLessThanAmount = (left: Amount, right: Amount): boolean =>\n  compareAmounts(left, right) < 0;\n\nexport const isLessThanOrEqualToAmount = (\n  left: Amount,\n  right: Amount\n): boolean => compareAmounts(left, right) <= 0;\n\nexport const isGreaterThanAmount = (left: Amount, right: Amount): boolean =>\n  compareAmounts(left, right) > 0;\n\nexport const isGreaterThanOrEqualToAmount = (\n  left: Amount,\n  right: Amount\n): boolean => compareAmounts(left, right) >= 0;\n\nexport const isZeroAmount = (value: Amount): boolean =>\n  compareAmounts(value, amount(0, value.currency)) === 0;\n\nexport const isPositiveAmount = (value: Amount): boolean =>\n  compareAmounts(value, amount(0, value.currency)) >= 0;\n\nexport const isNegativeAmount = (value: Amount): boolean =>\n  compareAmounts(value, amount(0, value.currency)) < 0;\n\nexport const formatAmount = (value: Amount): string => {\n  const power = new BN(10).pow(new BN(value.currency.decimals));\n  const basisPoints = value.basisPoints as unknown as BN & {\n    divmod: (other: BN) => { div: BN; mod: BN };\n  };\n\n  const { div, mod } = basisPoints.divmod(power);\n  const units = `${div.toString()}.${mod.abs().toString()}`;\n\n  return `${value.currency.symbol} ${units}`;\n};\n"],"names":["SOL","symbol","decimals","USD","amount","basisPoints","currency","toBasisPoints","lamports","sol","LAMPORTS_PER_SOL","usd","value","BN","isSol","currencyOrAmount","sameCurrencies","left","right","namespace","assertCurrency","actual","expected","UnexpectedCurrencyError","assertSol","assertSameCurrencies","operation","CurrencyMismatchError","addAmounts","add","subtractAmounts","sub","multiplyAmount","multiplier","muln","divideAmount","divisor","divn","compareAmounts","cmp","isEqualToAmount","isLessThanAmount","isLessThanOrEqualToAmount","isGreaterThanAmount","isGreaterThanOrEqualToAmount","isZeroAmount","isPositiveAmount","isNegativeAmount","formatAmount","power","pow","div","mod","divmod","units","toString","abs"],"mappings":"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"}