{"version":3,"file":"initializeMintBuilder.cjs","sources":["../../../../../src/programs/token/transactionBuilders/initializeMintBuilder.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport {\n  createInitializeMintInstruction,\n  TOKEN_PROGRAM_ID,\n} from '@solana/spl-token';\nimport { Signer } from '@/types';\nimport { TransactionBuilder } from '@/utils';\n\nexport interface InitializeMintBuilderParams {\n  decimals: number;\n  mint: Signer;\n  mintAuthority: PublicKey;\n  freezeAuthority?: PublicKey;\n  tokenProgram?: PublicKey;\n  instructionKey?: string;\n}\n\nexport const initializeMintBuilder = (\n  params: InitializeMintBuilderParams\n): TransactionBuilder => {\n  const {\n    decimals,\n    mint,\n    mintAuthority,\n    freezeAuthority = null,\n    tokenProgram = TOKEN_PROGRAM_ID,\n    instructionKey = 'initializeMint',\n  } = params;\n\n  return TransactionBuilder.make().add({\n    instruction: createInitializeMintInstruction(\n      mint.publicKey,\n      decimals,\n      mintAuthority,\n      freezeAuthority,\n      tokenProgram\n    ),\n    signers: [mint],\n    key: instructionKey,\n  });\n};\n"],"names":["initializeMintBuilder","params","decimals","mint","mintAuthority","freezeAuthority","tokenProgram","TOKEN_PROGRAM_ID","instructionKey","TransactionBuilder","make","add","instruction","createInitializeMintInstruction","publicKey","signers","key"],"mappings":";;;;;;;AAiBaA,MAAAA,qBAAqB,GAChCC,MADmC,IAEZ;EACvB,MAAM;IACJC,QADI;IAEJC,IAFI;IAGJC,aAHI;AAIJC,IAAAA,eAAe,GAAG,IAJd;AAKJC,IAAAA,YAAY,GAAGC,yBALX;AAMJC,IAAAA,cAAc,GAAG,gBAAA;AANb,GAAA,GAOFP,MAPJ,CAAA;AASA,EAAA,OAAOQ,qCAAkB,CAACC,IAAnB,EAAA,CAA0BC,GAA1B,CAA8B;AACnCC,IAAAA,WAAW,EAAEC,wCAA+B,CAC1CV,IAAI,CAACW,SADqC,EAE1CZ,QAF0C,EAG1CE,aAH0C,EAI1CC,eAJ0C,EAK1CC,YAL0C,CADT;IAQnCS,OAAO,EAAE,CAACZ,IAAD,CAR0B;AASnCa,IAAAA,GAAG,EAAER,cAAAA;AAT8B,GAA9B,CAAP,CAAA;AAWD;;;;"}