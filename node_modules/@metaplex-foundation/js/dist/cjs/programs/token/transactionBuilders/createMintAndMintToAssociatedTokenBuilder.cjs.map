{"version":3,"file":"createMintAndMintToAssociatedTokenBuilder.cjs","sources":["../../../../../src/programs/token/transactionBuilders/createMintAndMintToAssociatedTokenBuilder.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { Signer } from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { createMintBuilder } from './createMintBuilder';\nimport { createAssociatedTokenAccountBuilder } from './createAssociatedTokenAccountBuilder';\nimport { mintToBuilder } from './mintToBuilder';\n\nexport interface CreateMintAndMintToAssociatedTokenBuilderParams {\n  // Data.\n  lamports: number;\n  decimals: number;\n  amount: number | bigint;\n  createAssociatedToken?: boolean;\n\n  // Signers.\n  mint: Signer;\n  payer: Signer;\n  mintAuthority: Signer;\n\n  // Public keys.\n  owner: PublicKey;\n  associatedToken: PublicKey;\n  freezeAuthority?: PublicKey;\n\n  // Programs.\n  tokenProgram?: PublicKey;\n  associatedTokenProgram?: PublicKey;\n\n  // Instruction keys.\n  createAccountInstructionKey?: string;\n  initializeMintInstructionKey?: string;\n  createAssociatedTokenInstructionKey?: string;\n  mintToInstructionKey?: string;\n}\n\nexport const createMintAndMintToAssociatedTokenBuilder = (\n  params: CreateMintAndMintToAssociatedTokenBuilderParams\n): TransactionBuilder => {\n  const {\n    lamports,\n    decimals,\n    amount,\n    createAssociatedToken = true,\n    mint,\n    payer,\n    mintAuthority,\n    owner,\n    associatedToken,\n    freezeAuthority,\n    tokenProgram,\n    associatedTokenProgram,\n    createAccountInstructionKey,\n    initializeMintInstructionKey,\n    createAssociatedTokenInstructionKey,\n    mintToInstructionKey,\n  } = params;\n\n  return (\n    TransactionBuilder.make()\n\n      // Create and initialize the mint account.\n      .add(\n        createMintBuilder({\n          lamports,\n          decimals,\n          mint,\n          payer,\n          mintAuthority: mintAuthority.publicKey,\n          freezeAuthority,\n          tokenProgram,\n          createAccountInstructionKey,\n          initializeMintInstructionKey,\n        })\n      )\n\n      // Create the associated account if it does not exists.\n      .when(createAssociatedToken, (tx) =>\n        tx.add(\n          createAssociatedTokenAccountBuilder({\n            payer,\n            associatedToken,\n            owner,\n            mint: mint.publicKey,\n            tokenProgram,\n            associatedTokenProgram,\n            instructionKey: createAssociatedTokenInstructionKey,\n          })\n        )\n      )\n\n      // Mint to the associated token.\n      .add(\n        mintToBuilder({\n          mint: mint.publicKey,\n          destination: associatedToken,\n          mintAuthority,\n          amount,\n          tokenProgram,\n          instructionKey: mintToInstructionKey,\n        })\n      )\n  );\n};\n"],"names":["createMintAndMintToAssociatedTokenBuilder","params","lamports","decimals","amount","createAssociatedToken","mint","payer","mintAuthority","owner","associatedToken","freezeAuthority","tokenProgram","associatedTokenProgram","createAccountInstructionKey","initializeMintInstructionKey","createAssociatedTokenInstructionKey","mintToInstructionKey","TransactionBuilder","make","add","createMintBuilder","publicKey","when","tx","createAssociatedTokenAccountBuilder","instructionKey","mintToBuilder","destination"],"mappings":";;;;;;;;;AAmCaA,MAAAA,yCAAyC,GACpDC,MADuD,IAEhC;EACvB,MAAM;IACJC,QADI;IAEJC,QAFI;IAGJC,MAHI;AAIJC,IAAAA,qBAAqB,GAAG,IAJpB;IAKJC,IALI;IAMJC,KANI;IAOJC,aAPI;IAQJC,KARI;IASJC,eATI;IAUJC,eAVI;IAWJC,YAXI;IAYJC,sBAZI;IAaJC,2BAbI;IAcJC,4BAdI;IAeJC,mCAfI;AAgBJC,IAAAA,oBAAAA;AAhBI,GAAA,GAiBFhB,MAjBJ,CAAA;EAmBA,OACEiB,qCAAkB,CAACC,IAAnB,EAEE;GACCC,GAHH,CAIIC,mCAAiB,CAAC;IAChBnB,QADgB;IAEhBC,QAFgB;IAGhBG,IAHgB;IAIhBC,KAJgB;IAKhBC,aAAa,EAAEA,aAAa,CAACc,SALb;IAMhBX,eANgB;IAOhBC,YAPgB;IAQhBE,2BARgB;AAShBC,IAAAA,4BAAAA;AATgB,GAAD,CAJrB,CAiBE;GACCQ,IAlBH,CAkBQlB,qBAlBR,EAkBgCmB,EAAD,IAC3BA,EAAE,CAACJ,GAAH,CACEK,uEAAmC,CAAC;IAClClB,KADkC;IAElCG,eAFkC;IAGlCD,KAHkC;IAIlCH,IAAI,EAAEA,IAAI,CAACgB,SAJuB;IAKlCV,YALkC;IAMlCC,sBANkC;AAOlCa,IAAAA,cAAc,EAAEV,mCAAAA;GAPiB,CADrC,CAnBJ,CAgCE;GACCI,GAjCH,CAkCIO,2BAAa,CAAC;IACZrB,IAAI,EAAEA,IAAI,CAACgB,SADC;AAEZM,IAAAA,WAAW,EAAElB,eAFD;IAGZF,aAHY;IAIZJ,MAJY;IAKZQ,YALY;AAMZc,IAAAA,cAAc,EAAET,oBAAAA;AANJ,GAAD,CAlCjB,CADF,CAAA;AA6CD;;;;"}