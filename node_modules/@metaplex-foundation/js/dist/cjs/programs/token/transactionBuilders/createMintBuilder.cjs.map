{"version":3,"file":"createMintBuilder.cjs","sources":["../../../../../src/programs/token/transactionBuilders/createMintBuilder.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { MINT_SIZE, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { createAccountBuilder } from '@/programs/system';\nimport { Signer } from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { initializeMintBuilder } from './initializeMintBuilder';\n\nexport interface CreateMintBuilderParams {\n  lamports: number;\n  decimals: number;\n  mint: Signer;\n  payer: Signer;\n  mintAuthority: PublicKey;\n  freezeAuthority?: PublicKey;\n  tokenProgram?: PublicKey;\n  createAccountInstructionKey?: string;\n  initializeMintInstructionKey?: string;\n}\n\nexport const createMintBuilder = (\n  params: CreateMintBuilderParams\n): TransactionBuilder => {\n  const {\n    lamports,\n    decimals,\n    mint,\n    payer,\n    mintAuthority,\n    freezeAuthority,\n    tokenProgram = TOKEN_PROGRAM_ID,\n    createAccountInstructionKey = 'createAccount',\n    initializeMintInstructionKey = 'initializeMint',\n  } = params;\n\n  return (\n    TransactionBuilder.make()\n\n      // Allocate space on the blockchain for the mint account.\n      .add(\n        createAccountBuilder({\n          payer: payer,\n          newAccount: mint,\n          space: MINT_SIZE,\n          lamports,\n          program: tokenProgram,\n          instructionKey: createAccountInstructionKey,\n        })\n      )\n\n      // Initialize the mint account.\n      .add(\n        initializeMintBuilder({\n          decimals,\n          mint,\n          mintAuthority,\n          freezeAuthority,\n          tokenProgram,\n          instructionKey: initializeMintInstructionKey,\n        })\n      )\n  );\n};\n"],"names":["createMintBuilder","params","lamports","decimals","mint","payer","mintAuthority","freezeAuthority","tokenProgram","TOKEN_PROGRAM_ID","createAccountInstructionKey","initializeMintInstructionKey","TransactionBuilder","make","add","createAccountBuilder","newAccount","space","MINT_SIZE","program","instructionKey","initializeMintBuilder"],"mappings":";;;;;;;;;AAmBaA,MAAAA,iBAAiB,GAC5BC,MAD+B,IAER;EACvB,MAAM;IACJC,QADI;IAEJC,QAFI;IAGJC,IAHI;IAIJC,KAJI;IAKJC,aALI;IAMJC,eANI;AAOJC,IAAAA,YAAY,GAAGC,yBAPX;AAQJC,IAAAA,2BAA2B,GAAG,eAR1B;AASJC,IAAAA,4BAA4B,GAAG,gBAAA;AAT3B,GAAA,GAUFV,MAVJ,CAAA;EAYA,OACEW,qCAAkB,CAACC,IAAnB,EAEE;GACCC,GAHH,CAIIC,yCAAoB,CAAC;AACnBV,IAAAA,KAAK,EAAEA,KADY;AAEnBW,IAAAA,UAAU,EAAEZ,IAFO;AAGnBa,IAAAA,KAAK,EAAEC,kBAHY;IAInBhB,QAJmB;AAKnBiB,IAAAA,OAAO,EAAEX,YALU;AAMnBY,IAAAA,cAAc,EAAEV,2BAAAA;AANG,GAAD,CAJxB,CAcE;GACCI,GAfH,CAgBIO,2CAAqB,CAAC;IACpBlB,QADoB;IAEpBC,IAFoB;IAGpBE,aAHoB;IAIpBC,eAJoB;IAKpBC,YALoB;AAMpBY,IAAAA,cAAc,EAAET,4BAAAA;AANI,GAAD,CAhBzB,CADF,CAAA;AA2BD;;;;"}