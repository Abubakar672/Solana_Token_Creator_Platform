{"version":3,"file":"RpcClient.cjs","sources":["../../../../src/plugins/rpcModule/RpcClient.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport {\n  AccountInfo,\n  Blockhash,\n  Commitment,\n  ConfirmOptions,\n  GetProgramAccountsConfig,\n  PublicKey,\n  RpcResponseAndContext,\n  SendOptions,\n  SignatureResult,\n  Transaction,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  getSignerHistogram,\n  Signer,\n  UnparsedAccount,\n  UnparsedMaybeAccount,\n  isErrorWithLogs,\n  Program,\n  lamports,\n  Amount,\n  assertSol,\n} from '@/types';\nimport { TransactionBuilder, zipMap } from '@/utils';\nimport {\n  FailedToConfirmTransactionError,\n  FailedToConfirmTransactionWithResponseError,\n  FailedToSendTransactionError,\n  MetaplexError,\n  ParsedProgramError,\n  UnknownProgramError,\n} from '@/errors';\n\nexport type ConfirmTransactionResponse = RpcResponseAndContext<SignatureResult>;\nexport type SendAndConfirmTransactionResponse = {\n  signature: TransactionSignature;\n  confirmResponse: ConfirmTransactionResponse;\n};\n\nexport class RpcClient {\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  async sendTransaction(\n    transaction: Transaction | TransactionBuilder,\n    signers: Signer[] = [],\n    sendOptions: SendOptions = {}\n  ): Promise<TransactionSignature> {\n    if (transaction instanceof TransactionBuilder) {\n      signers = [...transaction.getSigners(), ...signers];\n      transaction = transaction.toTransaction();\n    }\n\n    transaction.feePayer ??= this.getDefaultFeePayer();\n    transaction.recentBlockhash ??= await this.getLatestBlockhash();\n\n    if (\n      transaction.feePayer &&\n      this.metaplex.identity().equals(transaction.feePayer)\n    ) {\n      signers = [this.metaplex.identity(), ...signers];\n    }\n\n    const { keypairs, identities } = getSignerHistogram(signers);\n\n    if (keypairs.length > 0) {\n      transaction.partialSign(...keypairs);\n    }\n\n    for (let i = 0; i < identities.length; i++) {\n      await identities[i].signTransaction(transaction);\n    }\n\n    const rawTransaction = transaction.serialize();\n\n    try {\n      return await this.metaplex.connection.sendRawTransaction(\n        rawTransaction,\n        sendOptions\n      );\n    } catch (error) {\n      throw this.parseProgramError(error, transaction);\n    }\n  }\n\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment\n  ): Promise<ConfirmTransactionResponse> {\n    let rpcResponse: ConfirmTransactionResponse;\n    try {\n      rpcResponse = await this.metaplex.connection.confirmTransaction(\n        signature,\n        commitment\n      );\n    } catch (error) {\n      throw new FailedToConfirmTransactionError(error as Error);\n    }\n\n    if (rpcResponse.value.err) {\n      throw new FailedToConfirmTransactionWithResponseError(rpcResponse);\n    }\n\n    return rpcResponse;\n  }\n\n  async sendAndConfirmTransaction(\n    transaction: Transaction | TransactionBuilder,\n    signers?: Signer[],\n    confirmOptions?: ConfirmOptions\n  ): Promise<SendAndConfirmTransactionResponse> {\n    const signature = await this.sendTransaction(\n      transaction,\n      signers,\n      confirmOptions\n    );\n    const confirmResponse = await this.confirmTransaction(\n      signature,\n      confirmOptions?.commitment\n    );\n\n    return { signature, confirmResponse };\n  }\n\n  async getAccount(publicKey: PublicKey, commitment?: Commitment) {\n    const accountInfo = await this.metaplex.connection.getAccountInfo(\n      publicKey,\n      commitment\n    );\n\n    return this.getUnparsedMaybeAccount(publicKey, accountInfo);\n  }\n\n  async getMultipleAccounts(publicKeys: PublicKey[], commitment?: Commitment) {\n    const accountInfos = await this.metaplex.connection.getMultipleAccountsInfo(\n      publicKeys,\n      commitment\n    );\n\n    return zipMap(publicKeys, accountInfos, (publicKey, accountInfo) => {\n      return this.getUnparsedMaybeAccount(publicKey, accountInfo);\n    });\n  }\n\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment\n  ): Promise<UnparsedAccount[]> {\n    const accounts = await this.metaplex.connection.getProgramAccounts(\n      programId,\n      configOrCommitment\n    );\n\n    return accounts.map(({ pubkey, account }) => ({\n      publicKey: pubkey,\n      ...account,\n    }));\n  }\n\n  async airdrop(\n    publicKey: PublicKey,\n    amount: Amount,\n    commitment?: Commitment\n  ): Promise<SendAndConfirmTransactionResponse> {\n    assertSol(amount);\n\n    const signature = await this.metaplex.connection.requestAirdrop(\n      publicKey,\n      amount.basisPoints.toNumber()\n    );\n\n    const confirmResponse = await this.confirmTransaction(\n      signature,\n      commitment\n    );\n\n    return { signature, confirmResponse };\n  }\n\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment\n  ): Promise<Amount> {\n    const balance = await this.metaplex.connection.getBalance(\n      publicKey,\n      commitment\n    );\n\n    return lamports(balance);\n  }\n\n  async getRent(bytes: number, commitment?: Commitment): Promise<Amount> {\n    const rent =\n      await this.metaplex.connection.getMinimumBalanceForRentExemption(\n        bytes,\n        commitment\n      );\n\n    return lamports(rent);\n  }\n\n  async getLatestBlockhash(): Promise<Blockhash> {\n    return (await this.metaplex.connection.getLatestBlockhash('finalized'))\n      .blockhash;\n  }\n\n  protected getDefaultFeePayer(): PublicKey | undefined {\n    const identity = this.metaplex.identity().publicKey;\n\n    return identity.equals(PublicKey.default) ? undefined : identity;\n  }\n\n  protected getUnparsedMaybeAccount(\n    publicKey: PublicKey,\n    accountInfo: AccountInfo<Buffer> | null\n  ): UnparsedMaybeAccount {\n    if (!accountInfo) {\n      return { publicKey, exists: false };\n    }\n\n    return { publicKey, exists: true, ...accountInfo };\n  }\n\n  protected parseProgramError(\n    error: unknown,\n    transaction: Transaction\n  ): MetaplexError {\n    // Ensure the error as logs.\n    if (!isErrorWithLogs(error)) {\n      return new FailedToSendTransactionError(error as Error);\n    }\n\n    // Parse the instruction number.\n    const regex = /Error processing Instruction (\\d+):/;\n    const instruction: string | null = error.message.match(regex)?.[1] ?? null;\n\n    // Ensure there is an instruction number given to find the program.\n    if (!instruction) {\n      return new FailedToSendTransactionError(error);\n    }\n\n    // Get the program ID from the instruction in the transaction.\n    const instructionNumber: number = parseInt(instruction, 10);\n    const programId: PublicKey | null =\n      transaction.instructions?.[instructionNumber]?.programId ?? null;\n\n    // Ensure we were able to find a program ID for the instruction.\n    if (!programId) {\n      return new FailedToSendTransactionError(error);\n    }\n\n    // Find a registered program if any.\n    let program: Program;\n    try {\n      program = this.metaplex.programs().get(programId);\n    } catch (_programNotFoundError) {\n      return new FailedToSendTransactionError(error);\n    }\n\n    // Ensure an error resolver exists on the program.\n    if (!program.errorResolver) {\n      return new UnknownProgramError(program, error);\n    }\n\n    // Finally, resolve the error.\n    const resolvedError = program.errorResolver(error);\n\n    return resolvedError\n      ? new ParsedProgramError(program, resolvedError)\n      : new UnknownProgramError(program, error);\n  }\n}\n"],"names":["RpcClient","constructor","metaplex","sendTransaction","transaction","signers","sendOptions","TransactionBuilder","getSigners","toTransaction","feePayer","getDefaultFeePayer","recentBlockhash","getLatestBlockhash","identity","equals","keypairs","identities","getSignerHistogram","length","partialSign","i","signTransaction","rawTransaction","serialize","connection","sendRawTransaction","error","parseProgramError","confirmTransaction","signature","commitment","rpcResponse","FailedToConfirmTransactionError","value","err","FailedToConfirmTransactionWithResponseError","sendAndConfirmTransaction","confirmOptions","confirmResponse","getAccount","publicKey","accountInfo","getAccountInfo","getUnparsedMaybeAccount","getMultipleAccounts","publicKeys","accountInfos","getMultipleAccountsInfo","zipMap","getProgramAccounts","programId","configOrCommitment","accounts","map","pubkey","account","airdrop","amount","assertSol","requestAirdrop","basisPoints","toNumber","getBalance","balance","lamports","getRent","bytes","rent","getMinimumBalanceForRentExemption","blockhash","PublicKey","default","undefined","exists","isErrorWithLogs","FailedToSendTransactionError","regex","instruction","message","match","instructionNumber","parseInt","instructions","program","programs","get","_programNotFoundError","errorResolver","UnknownProgramError","resolvedError","ParsedProgramError"],"mappings":"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"}