{"version":3,"file":"createNft.cjs","sources":["../../../../src/plugins/nftModule/createNft.ts"],"sourcesContent":["import { ConfirmOptions, Keypair, PublicKey } from '@solana/web3.js';\nimport {\n  getAssociatedTokenAddress,\n  getMinimumBalanceForRentExemptMint,\n} from '@solana/spl-token';\nimport { bignum } from '@metaplex-foundation/beet';\nimport {\n  Creator,\n  Collection,\n  Uses,\n  DataV2,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { Metaplex } from '@/Metaplex';\nimport { useOperation, Operation, Signer, OperationHandler } from '@/types';\nimport { JsonMetadata } from './JsonMetadata';\nimport {\n  createCreateMasterEditionV3InstructionWithSigners,\n  createCreateMetadataAccountV2InstructionWithSigners,\n  createMintAndMintToAssociatedTokenBuilder,\n  findMasterEditionV2Pda,\n  findMetadataPda,\n} from '@/programs';\nimport { TransactionBuilder } from '@/utils';\n\nconst Key = 'CreateNftOperation' as const;\nexport const createNftOperation = useOperation<CreateNftOperation>(Key);\nexport type CreateNftOperation = Operation<\n  typeof Key,\n  CreateNftInput,\n  CreateNftOutput\n>;\n\nexport interface CreateNftInput {\n  // Data.\n  uri: string;\n  name?: string;\n  symbol?: string;\n  sellerFeeBasisPoints?: number;\n  creators?: Creator[];\n  collection?: Collection;\n  uses?: Uses;\n  isMutable?: boolean;\n  maxSupply?: bignum;\n  allowHolderOffCurve?: boolean;\n\n  // Signers.\n  mint?: Signer;\n  payer?: Signer;\n  mintAuthority?: Signer;\n  updateAuthority?: Signer;\n\n  // Public keys.\n  owner?: PublicKey;\n  freezeAuthority?: PublicKey;\n\n  // Programs.\n  tokenProgram?: PublicKey;\n  associatedTokenProgram?: PublicKey;\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n}\n\nexport interface CreateNftOutput {\n  mint: Signer;\n  metadata: PublicKey;\n  masterEdition: PublicKey;\n  associatedToken: PublicKey;\n  transactionId: string;\n}\n\nexport const createNftOperationHandler: OperationHandler<CreateNftOperation> = {\n  handle: async (operation: CreateNftOperation, metaplex: Metaplex) => {\n    const {\n      uri,\n      isMutable,\n      maxSupply,\n      allowHolderOffCurve = false,\n      mint = Keypair.generate(),\n      payer = metaplex.identity(),\n      mintAuthority = metaplex.identity(),\n      updateAuthority = mintAuthority,\n      owner = mintAuthority.publicKey,\n      freezeAuthority,\n      tokenProgram,\n      associatedTokenProgram,\n      confirmOptions,\n    } = operation.input;\n\n    let metadata: JsonMetadata;\n    try {\n      metadata = await metaplex.storage().downloadJson(uri);\n    } catch (e) {\n      metadata = {};\n    }\n\n    const data = resolveData(\n      operation.input,\n      metadata,\n      updateAuthority.publicKey\n    );\n\n    const metadataPda = findMetadataPda(mint.publicKey);\n    const masterEditionPda = findMasterEditionV2Pda(mint.publicKey);\n    const lamports = await getMinimumBalanceForRentExemptMint(\n      metaplex.connection\n    );\n    const associatedToken = await getAssociatedTokenAddress(\n      mint.publicKey,\n      owner,\n      allowHolderOffCurve,\n      tokenProgram,\n      associatedTokenProgram\n    );\n\n    const { signature } = await metaplex.rpc().sendAndConfirmTransaction(\n      createNftBuilder({\n        lamports,\n        data,\n        isMutable,\n        maxSupply,\n        mint,\n        payer,\n        mintAuthority,\n        updateAuthority,\n        owner,\n        associatedToken,\n        freezeAuthority,\n        metadata: metadataPda,\n        masterEdition: masterEditionPda,\n        tokenProgram,\n        associatedTokenProgram,\n      }),\n      undefined,\n      confirmOptions\n    );\n\n    return {\n      mint,\n      metadata: metadataPda,\n      masterEdition: masterEditionPda,\n      associatedToken,\n      transactionId: signature,\n    };\n  },\n};\n\nconst resolveData = (\n  input: CreateNftInput,\n  metadata: JsonMetadata,\n  updateAuthority: PublicKey\n): DataV2 => {\n  const metadataCreators: Creator[] | undefined = metadata.properties?.creators\n    ?.filter((creator) => creator.address)\n    .map((creator) => ({\n      address: new PublicKey(creator.address as string),\n      share: creator.share ?? 0,\n      verified: false,\n    }));\n\n  let creators = input.creators ?? metadataCreators ?? null;\n\n  if (creators === null) {\n    creators = [\n      {\n        address: updateAuthority,\n        share: 100,\n        verified: true,\n      },\n    ];\n  } else {\n    creators = creators.map((creator) => {\n      if (creator.address.toBase58() === updateAuthority.toBase58()) {\n        return { ...creator, verified: true };\n      } else {\n        return creator;\n      }\n    });\n  }\n\n  return {\n    name: input.name ?? metadata.name ?? '',\n    symbol: input.symbol ?? metadata.symbol ?? '',\n    uri: input.uri,\n    sellerFeeBasisPoints:\n      input.sellerFeeBasisPoints ?? metadata.seller_fee_basis_points ?? 500,\n    creators,\n    collection: input.collection ?? null,\n    uses: input.uses ?? null,\n  };\n};\n\nexport interface CreateNftBuilderParams {\n  // Data.\n  lamports: number;\n  data: DataV2;\n  isMutable?: boolean;\n  maxSupply?: bignum;\n\n  // Signers.\n  mint: Signer;\n  payer: Signer;\n  mintAuthority: Signer;\n  updateAuthority?: Signer;\n\n  // Public keys.\n  owner: PublicKey;\n  associatedToken: PublicKey;\n  freezeAuthority?: PublicKey;\n  metadata: PublicKey;\n  masterEdition: PublicKey;\n\n  // Programs.\n  tokenProgram?: PublicKey;\n  associatedTokenProgram?: PublicKey;\n\n  // Instruction keys.\n  createAccountInstructionKey?: string;\n  initializeMintInstructionKey?: string;\n  createAssociatedTokenInstructionKey?: string;\n  mintToInstructionKey?: string;\n  createMetadataInstructionKey?: string;\n  createMasterEditionInstructionKey?: string;\n}\n\nexport const createNftBuilder = (\n  params: CreateNftBuilderParams\n): TransactionBuilder => {\n  const {\n    lamports,\n    data,\n    isMutable,\n    maxSupply,\n    mint,\n    payer,\n    mintAuthority,\n    updateAuthority = mintAuthority,\n    owner,\n    associatedToken,\n    freezeAuthority,\n    metadata,\n    masterEdition,\n    tokenProgram,\n    associatedTokenProgram,\n    createAccountInstructionKey,\n    initializeMintInstructionKey,\n    createAssociatedTokenInstructionKey,\n    mintToInstructionKey,\n    createMetadataInstructionKey,\n    createMasterEditionInstructionKey,\n  } = params;\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Create the mint account and send one token to the holder.\n      .add(\n        createMintAndMintToAssociatedTokenBuilder({\n          lamports,\n          decimals: 0,\n          amount: 1,\n          createAssociatedToken: true,\n          mint,\n          payer,\n          mintAuthority,\n          owner,\n          associatedToken,\n          freezeAuthority,\n          tokenProgram,\n          associatedTokenProgram,\n          createAccountInstructionKey,\n          initializeMintInstructionKey,\n          createAssociatedTokenInstructionKey,\n          mintToInstructionKey,\n        })\n      )\n\n      // Create metadata account.\n      .add(\n        createCreateMetadataAccountV2InstructionWithSigners({\n          data,\n          isMutable,\n          mintAuthority,\n          payer,\n          mint: mint.publicKey,\n          metadata,\n          updateAuthority: updateAuthority.publicKey,\n          instructionKey: createMetadataInstructionKey,\n        })\n      )\n\n      // Create master edition account (prevents further minting).\n      .add(\n        createCreateMasterEditionV3InstructionWithSigners({\n          maxSupply,\n          payer,\n          mintAuthority,\n          updateAuthority,\n          mint: mint.publicKey,\n          metadata,\n          masterEdition,\n          instructionKey: createMasterEditionInstructionKey,\n        })\n      )\n  );\n};\n"],"names":["Key","createNftOperation","useOperation","createNftOperationHandler","handle","operation","metaplex","uri","isMutable","maxSupply","allowHolderOffCurve","mint","Keypair","generate","payer","identity","mintAuthority","updateAuthority","owner","publicKey","freezeAuthority","tokenProgram","associatedTokenProgram","confirmOptions","input","metadata","storage","downloadJson","e","data","resolveData","metadataPda","findMetadataPda","masterEditionPda","findMasterEditionV2Pda","lamports","getMinimumBalanceForRentExemptMint","connection","associatedToken","getAssociatedTokenAddress","signature","rpc","sendAndConfirmTransaction","createNftBuilder","masterEdition","undefined","transactionId","metadataCreators","properties","creators","filter","creator","address","map","PublicKey","share","verified","toBase58","name","symbol","sellerFeeBasisPoints","seller_fee_basis_points","collection","uses","params","createAccountInstructionKey","initializeMintInstructionKey","createAssociatedTokenInstructionKey","mintToInstructionKey","createMetadataInstructionKey","createMasterEditionInstructionKey","TransactionBuilder","make","setFeePayer","add","createMintAndMintToAssociatedTokenBuilder","decimals","amount","createAssociatedToken","createCreateMetadataAccountV2InstructionWithSigners","instructionKey","createCreateMasterEditionV3InstructionWithSigners"],"mappings":"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"}