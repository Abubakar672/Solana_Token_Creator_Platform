{"version":3,"file":"IdentityClient.cjs","sources":["../../../../src/plugins/identityModule/IdentityClient.ts"],"sourcesContent":["import { PublicKey, Transaction } from '@solana/web3.js';\nimport nacl from 'tweetnacl';\nimport { DriverNotProvidedError } from '@/errors';\nimport { HasDriver, IdentitySigner, KeypairSigner, Signer } from '@/types';\nimport { IdentityDriver } from './IdentityDriver';\n\nexport class IdentityClient\n  implements HasDriver<IdentityDriver>, IdentitySigner\n{\n  private _driver: IdentityDriver | null = null;\n\n  driver(): IdentityDriver {\n    if (!this._driver) {\n      throw new DriverNotProvidedError('IdentityDriver');\n    }\n\n    return this._driver;\n  }\n\n  setDriver(newDriver: IdentityDriver): void {\n    this._driver = newDriver;\n  }\n\n  get publicKey(): PublicKey {\n    return this.driver().publicKey;\n  }\n\n  get secretKey(): Uint8Array | undefined {\n    return this.driver().secretKey;\n  }\n\n  signMessage(message: Uint8Array): Promise<Uint8Array> {\n    return this.driver().signMessage(message);\n  }\n\n  signTransaction(transaction: Transaction): Promise<Transaction> {\n    return this.driver().signTransaction(transaction);\n  }\n\n  signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    return this.driver().signAllTransactions(transactions);\n  }\n\n  verifyMessage(message: Uint8Array, signature: Uint8Array): boolean {\n    return nacl.sign.detached.verify(\n      message,\n      signature,\n      this.publicKey.toBytes()\n    );\n  }\n\n  equals(that: Signer | PublicKey): boolean {\n    if ('publicKey' in that) {\n      that = that.publicKey;\n    }\n\n    return this.publicKey.equals(that);\n  }\n\n  hasSecretKey(): this is KeypairSigner {\n    return this.secretKey != null;\n  }\n}\n"],"names":["IdentityClient","_defineProperty","driver","_driver","DriverNotProvidedError","setDriver","newDriver","publicKey","secretKey","signMessage","message","signTransaction","transaction","signAllTransactions","transactions","verifyMessage","signature","nacl","sign","detached","verify","toBytes","equals","that","hasSecretKey"],"mappings":";;;;;;;;;;;;AAMO,MAAMA,cAAN,CAEP;AAAA,EAAA,WAAA,GAAA;AAAA,IAAAC,wCAAA,CAAA,IAAA,EAAA,SAAA,EAC2C,IAD3C,CAAA,CAAA;AAAA,GAAA;;AAGEC,EAAAA,MAAM,GAAmB;IACvB,IAAI,CAAC,IAAKC,CAAAA,OAAV,EAAmB;AACjB,MAAA,MAAM,IAAIC,+BAAJ,CAA2B,gBAA3B,CAAN,CAAA;AACD,KAAA;;AAED,IAAA,OAAO,KAAKD,OAAZ,CAAA;AACD,GAAA;;EAEDE,SAAS,CAACC,SAAD,EAAkC;IACzC,IAAKH,CAAAA,OAAL,GAAeG,SAAf,CAAA;AACD,GAAA;;AAEY,EAAA,IAATC,SAAS,GAAc;IACzB,OAAO,IAAA,CAAKL,MAAL,EAAA,CAAcK,SAArB,CAAA;AACD,GAAA;;AAEY,EAAA,IAATC,SAAS,GAA2B;IACtC,OAAO,IAAA,CAAKN,MAAL,EAAA,CAAcM,SAArB,CAAA;AACD,GAAA;;EAEDC,WAAW,CAACC,OAAD,EAA2C;AACpD,IAAA,OAAO,KAAKR,MAAL,EAAA,CAAcO,WAAd,CAA0BC,OAA1B,CAAP,CAAA;AACD,GAAA;;EAEDC,eAAe,CAACC,WAAD,EAAiD;AAC9D,IAAA,OAAO,KAAKV,MAAL,EAAA,CAAcS,eAAd,CAA8BC,WAA9B,CAAP,CAAA;AACD,GAAA;;EAEDC,mBAAmB,CAACC,YAAD,EAAsD;AACvE,IAAA,OAAO,KAAKZ,MAAL,EAAA,CAAcW,mBAAd,CAAkCC,YAAlC,CAAP,CAAA;AACD,GAAA;;AAEDC,EAAAA,aAAa,CAACL,OAAD,EAAsBM,SAAtB,EAAsD;AACjE,IAAA,OAAOC,wBAAI,CAACC,IAAL,CAAUC,QAAV,CAAmBC,MAAnB,CACLV,OADK,EAELM,SAFK,EAGL,IAAA,CAAKT,SAAL,CAAec,OAAf,EAHK,CAAP,CAAA;AAKD,GAAA;;EAEDC,MAAM,CAACC,IAAD,EAAoC;IACxC,IAAI,WAAA,IAAeA,IAAnB,EAAyB;MACvBA,IAAI,GAAGA,IAAI,CAAChB,SAAZ,CAAA;AACD,KAAA;;AAED,IAAA,OAAO,KAAKA,SAAL,CAAee,MAAf,CAAsBC,IAAtB,CAAP,CAAA;AACD,GAAA;;AAEDC,EAAAA,YAAY,GAA0B;IACpC,OAAO,IAAA,CAAKhB,SAAL,IAAkB,IAAzB,CAAA;AACD,GAAA;;AArDH;;;;"}