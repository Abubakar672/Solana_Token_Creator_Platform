{"version":3,"file":"WhitelistMint.cjs","sources":["../../../../../src/plugins/candyMachineModule/config/WhitelistMint.ts"],"sourcesContent":["import {\n  WhitelistMintMode,\n  WhitelistMintSettings,\n} from '@metaplex-foundation/mpl-candy-machine';\nimport BN from 'bn.js';\nimport { PublicKeyString, convertToPublickKey } from '@/types';\nimport { UnreachableCaseError } from '@/errors';\n\nexport const BURN_EVERY_TIME = 'burnEveryTime';\nexport const NEVER_BURN = 'neverBurn';\n\nexport const WhitelistModes = [BURN_EVERY_TIME, NEVER_BURN] as const;\n\n/**\n * Whitelist Modes\n *\n * burnEveryTime - Whitelist token is burned after the mint\n * neverBurn - Whitelist token is returned to holder\n */\nexport type WhitelistMode = typeof WhitelistModes[number];\n\n/**\n * Whitelist Mint Settings\n\n * Whitelist settings provide a variety of different use cases and revolve\n * around the idea of using custom SPL tokens to offer special rights to token\n * holders - how said SPL token is distributed is up to you. \n *\n * @property mode - {@link WhitelistMode} (burnEveryTime or neverBurn)\n * @property mint - Mint address of the whitelist token\n * @property presale - Indicates whether whitelist token holders can mint before goLiveDate\n * @property discountPrice - Price for whitelist token holders\n */\nexport type WhitelistMintSettingsConfig = {\n  mode: WhitelistMode;\n  mint: PublicKeyString;\n  presale: boolean;\n  discountPrice: number;\n};\n\nexport function whiteListMintSettingsFromConfig(\n  config?: WhitelistMintSettingsConfig\n): WhitelistMintSettings | undefined {\n  if (config == null) return undefined;\n  let mode: WhitelistMintMode;\n  switch (config.mode) {\n    case BURN_EVERY_TIME:\n      mode = WhitelistMintMode.BurnEveryTime;\n      break;\n    case NEVER_BURN:\n      mode = WhitelistMintMode.NeverBurn;\n      break;\n    default:\n      throw new UnreachableCaseError(config.mode);\n  }\n  const mint = convertToPublickKey(config.mint);\n  const discountPrice = new BN(config.discountPrice);\n\n  return { ...config, mode, mint, discountPrice };\n}\n"],"names":["BURN_EVERY_TIME","NEVER_BURN","WhitelistModes","whiteListMintSettingsFromConfig","config","undefined","mode","WhitelistMintMode","BurnEveryTime","NeverBurn","UnreachableCaseError","mint","convertToPublickKey","discountPrice","BN"],"mappings":";;;;;;;;;;;;;AAQO,MAAMA,eAAe,GAAG,gBAAxB;AACA,MAAMC,UAAU,GAAG,YAAnB;MAEMC,cAAc,GAAG,CAACF,eAAD,EAAkBC,UAAlB,EAAvB;AAEP;AACA;AACA;AACA;AACA;AACA;;AAsBO,SAASE,+BAAT,CACLC,MADK,EAE8B;AACnC,EAAA,IAAIA,MAAM,IAAI,IAAd,EAAoB,OAAOC,SAAP,CAAA;AACpB,EAAA,IAAIC,IAAJ,CAAA;;EACA,QAAQF,MAAM,CAACE,IAAf;AACE,IAAA,KAAKN,eAAL;MACEM,IAAI,GAAGC,iCAAiB,CAACC,aAAzB,CAAA;AACA,MAAA,MAAA;;AACF,IAAA,KAAKP,UAAL;MACEK,IAAI,GAAGC,iCAAiB,CAACE,SAAzB,CAAA;AACA,MAAA,MAAA;;AACF,IAAA;AACE,MAAA,MAAM,IAAIC,6BAAJ,CAAyBN,MAAM,CAACE,IAAhC,CAAN,CAAA;AARJ,GAAA;;AAUA,EAAA,MAAMK,IAAI,GAAGC,mCAAmB,CAACR,MAAM,CAACO,IAAR,CAAhC,CAAA;EACA,MAAME,aAAa,GAAG,IAAIC,sBAAJ,CAAOV,MAAM,CAACS,aAAd,CAAtB,CAAA;EAEA,OAAO,EAAE,GAAGT,MAAL;IAAaE,IAAb;IAAmBK,IAAnB;AAAyBE,IAAAA,aAAAA;GAAhC,CAAA;AACD;;;;;;;"}