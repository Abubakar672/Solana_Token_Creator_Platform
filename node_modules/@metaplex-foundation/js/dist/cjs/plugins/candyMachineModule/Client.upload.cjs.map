{"version":3,"file":"Client.upload.cjs","sources":["../../../../src/plugins/candyMachineModule/Client.upload.ts"],"sourcesContent":["import { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { Signer } from '@/types';\nimport { CandyMachineToUpdateNotFoundError } from '@/errors';\nimport { MetaplexFile } from '@/plugins/storageModule';\nimport { ConfigLine } from '@metaplex-foundation/mpl-candy-machine';\nimport { JsonMetadata, UploadMetadataInput } from '@/plugins/nftModule';\nimport type { CandyMachineClient } from './CandyMachineClient';\nimport {\n  assertCanAdd,\n  assertNotFull,\n  creatorsToJsonMetadataCreators,\n} from './Client.helpers';\nimport { randomStr } from '../../utils';\n\nexport type UploadAssetToCandyMachineParams = {\n  // Accounts.\n  candyMachineAddress: PublicKey;\n  authoritySigner: Signer;\n\n  // Data.\n  metadata: UploadMetadataInput;\n\n  // If `true` the successfully uploaded asset is added to the candy machine.\n  addToCandyMachine?: boolean;\n\n  // Transaction Options.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport async function uploadAssetForCandyMachine(\n  this: CandyMachineClient,\n  params: UploadAssetToCandyMachineParams\n) {\n  const {\n    candyMachineAddress,\n    authoritySigner,\n    metadata: rawMetadata,\n    addToCandyMachine = false,\n    confirmOptions,\n  } = params;\n\n  const candyMachine = await this.findByAddress(candyMachineAddress);\n  if (candyMachine == null) {\n    throw new CandyMachineToUpdateNotFoundError(candyMachineAddress);\n  }\n\n  assertNotFull(candyMachine, candyMachine.assetsCount);\n\n  const { uri, metadata } = await this.metaplex.nfts().uploadMetadata({\n    ...rawMetadata,\n    // TODO(thlorenz): Is this correct?\n    seller_fee_basis_points:\n      rawMetadata.seller_fee_basis_points ?? candyMachine.sellerFeeBasisPoints,\n    properties: {\n      ...rawMetadata.properties,\n      // Default NFT creators to equal those of the Candy Machine\n      creators:\n        rawMetadata.properties?.creators ??\n        creatorsToJsonMetadataCreators(candyMachine.creators),\n    },\n  });\n\n  let addAssetsTransactionId;\n  if (addToCandyMachine) {\n    const { transactionId } = await this.addAssets({\n      candyMachineAddress: candyMachineAddress,\n      authoritySigner: authoritySigner,\n      assets: [{ uri, name: metadata.name ?? randomStr() }],\n      confirmOptions,\n    });\n    addAssetsTransactionId = transactionId;\n  }\n\n  return {\n    metadata,\n    uri,\n    addAssetsTransactionId,\n  };\n}\n\nexport type UploadAssetsToCandyMachineParams = {\n  // Accounts\n  candyMachineAddress: PublicKey;\n  authoritySigner: Signer;\n\n  // Assets\n  assets: MetaplexFile[];\n\n  // If `true` then the assets are uploaded in parallel, however note that this\n  // can result in some successfully uploading while others fail\n  parallel?: boolean;\n\n  // If `true` all successfully uploaded assets are added to the candy machine\n  addToCandyMachine?: boolean;\n\n  // Transaction Options.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type UploadedAsset = {\n  uri: string;\n  metadata: JsonMetadata<string>;\n  name: string;\n};\n\nexport async function uploadAssetsForCandyMachine(\n  this: CandyMachineClient,\n  params: UploadAssetsToCandyMachineParams\n) {\n  const {\n    candyMachineAddress,\n    assets,\n    parallel = false,\n    addToCandyMachine = false,\n  } = params;\n\n  const candyMachine = await this.findByAddress(candyMachineAddress);\n  if (candyMachine == null) {\n    throw new CandyMachineToUpdateNotFoundError(candyMachineAddress);\n  }\n\n  assertNotFull(candyMachine, candyMachine.assetsCount);\n  assertCanAdd(candyMachine, candyMachine.assetsCount, assets.length);\n\n  // TODO(thlorenz): prevent same asset from being uploaded twice, remove once\n  // API improves to have clearly separated properties\n  const uploadParams = assets.map(\n    (file: MetaplexFile): UploadAssetToCandyMachineParams => ({\n      ...params,\n      metadata: {\n        image: file,\n        name: file.displayName,\n      },\n      // We add them all in one transaction after all assets are uploaded\n      addToCandyMachine: false,\n    })\n  );\n\n  let uploadedAssets: UploadedAsset[] = [];\n  const errors = [];\n\n  if (parallel) {\n    // NOTE: we are uploading in parallel here but if only one upload was to fail\n    // all the other ones still happen as we cannot cancel promises\n    const promises = uploadParams.map(async (assetParam) => {\n      let uploaded;\n      let err;\n      try {\n        uploaded = await _uploadAssetAndSelectName(this, assetParam);\n      } catch (e) {\n        errors.push(e);\n      }\n\n      return { uploaded, err };\n    });\n\n    const results = await Promise.all(promises);\n    for (const { err, uploaded } of results) {\n      if (err) {\n        errors.push(err);\n      } else {\n        uploadedAssets.push(uploaded as UploadedAsset);\n      }\n    }\n  } else {\n    for (const assetParam of uploadParams) {\n      try {\n        uploadedAssets.push(await _uploadAssetAndSelectName(this, assetParam));\n      } catch (err) {\n        errors.push(err);\n        continue;\n      }\n    }\n  }\n\n  let addAssetsTransactionId;\n  let updatedCandyMachine = candyMachine;\n  if (addToCandyMachine && uploadedAssets.length > 0) {\n    const configLines: ConfigLine[] = uploadedAssets.map((x) => ({\n      uri: x.uri,\n      name: x.name,\n    }));\n\n    const { transactionId, candyMachine } = await this.addAssets({\n      ...params,\n      assets: configLines,\n    });\n    addAssetsTransactionId = transactionId;\n    if (candyMachine != null) {\n      updatedCandyMachine = candyMachine;\n    }\n  }\n\n  return {\n    addAssetsTransactionId,\n    uploadedAssets,\n    candyMachine: updatedCandyMachine,\n    errors,\n  };\n}\n\nasync function _uploadAssetAndSelectName(\n  candyMachine: CandyMachineClient,\n  params: UploadAssetToCandyMachineParams\n): Promise<UploadedAsset> {\n  const { uri, metadata: parseMetadata } =\n    await candyMachine.uploadAssetForCandyMachine(params);\n\n  return {\n    uri,\n    metadata: parseMetadata,\n    name: parseMetadata.name ?? randomStr(),\n  };\n}\n"],"names":["uploadAssetForCandyMachine","params","candyMachineAddress","authoritySigner","metadata","rawMetadata","addToCandyMachine","confirmOptions","candyMachine","findByAddress","CandyMachineToUpdateNotFoundError","assertNotFull","assetsCount","uri","metaplex","nfts","uploadMetadata","seller_fee_basis_points","sellerFeeBasisPoints","properties","creators","creatorsToJsonMetadataCreators","addAssetsTransactionId","transactionId","addAssets","assets","name","randomStr","uploadAssetsForCandyMachine","parallel","assertCanAdd","length","uploadParams","map","file","image","displayName","uploadedAssets","errors","promises","assetParam","uploaded","err","_uploadAssetAndSelectName","e","push","results","Promise","all","updatedCandyMachine","configLines","x","parseMetadata"],"mappings":"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"}