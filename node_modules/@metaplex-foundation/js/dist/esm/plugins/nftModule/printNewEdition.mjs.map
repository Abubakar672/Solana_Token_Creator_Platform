{"version":3,"file":"printNewEdition.mjs","sources":["../../../../src/plugins/nftModule/printNewEdition.ts"],"sourcesContent":["import { ConfirmOptions, Keypair, PublicKey } from '@solana/web3.js';\nimport {\n  getAssociatedTokenAddress,\n  getMinimumBalanceForRentExemptMint,\n} from '@solana/spl-token';\nimport BN from 'bn.js';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  createMintAndMintToAssociatedTokenBuilder,\n  createMintNewEditionFromMasterEditionViaTokenInstructionWithSigners,\n  createMintNewEditionFromMasterEditionViaVaultProxyInstructionWithSigners,\n  parseOriginalEditionAccount,\n  findEditionMarkerPda,\n  findEditionPda,\n  findMasterEditionV2Pda,\n  findMetadataPda,\n} from '@/programs';\nimport { useOperation, Operation, OperationHandler, Signer } from '@/types';\nimport { AccountNotFoundError } from '@/errors';\nimport { InstructionWithSigners, TransactionBuilder } from '@/utils';\n\nconst Key = 'PrintNewEditionOperation' as const;\nexport const printNewEditionOperation =\n  useOperation<PrintNewEditionOperation>(Key);\nexport type PrintNewEditionOperation = Operation<\n  typeof Key,\n  PrintNewEditionInput,\n  PrintNewEditionOutput\n>;\n\nexport type PrintNewEditionInput = PrintNewEditionSharedInput &\n  PrintNewEditionViaInput;\n\nexport type PrintNewEditionSharedInput = {\n  originalMint: PublicKey;\n  newMint?: Signer;\n  newMintAuthority?: Signer;\n  newUpdateAuthority?: PublicKey;\n  newOwner?: PublicKey;\n  newFreezeAuthority?: PublicKey;\n  payer?: Signer;\n  tokenProgram?: PublicKey;\n  associatedTokenProgram?: PublicKey;\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type PrintNewEditionViaInput =\n  | {\n      via?: 'token';\n      originalTokenAccountOwner?: Signer;\n      originalTokenAccount?: PublicKey;\n    }\n  | {\n      via: 'vault';\n      vaultAuthority: Signer;\n      safetyDepositStore: PublicKey;\n      safetyDepositBox: PublicKey;\n      vault: PublicKey;\n      tokenVaultProgram?: PublicKey;\n    };\n\nexport type PrintNewEditionOutput = {\n  mint: Signer;\n  metadata: PublicKey;\n  edition: PublicKey;\n  associatedToken: PublicKey;\n  transactionId: string;\n};\n\nexport const printNewEditionOperationHandler: OperationHandler<PrintNewEditionOperation> =\n  {\n    handle: async (operation: PrintNewEditionOperation, metaplex: Metaplex) => {\n      const {\n        originalMint,\n        newMint = Keypair.generate(),\n        newMintAuthority = metaplex.identity(),\n        newUpdateAuthority = newMintAuthority.publicKey,\n        newOwner = newMintAuthority.publicKey,\n        newFreezeAuthority,\n        payer = metaplex.identity(),\n        tokenProgram,\n        associatedTokenProgram,\n        confirmOptions,\n      } = operation.input;\n\n      // Original NFT.\n      const originalMetadata = findMetadataPda(originalMint);\n      const originalEdition = findMasterEditionV2Pda(originalMint);\n      const originalEditionAccount = parseOriginalEditionAccount(\n        await metaplex.rpc().getAccount(originalEdition)\n      );\n\n      if (!originalEditionAccount.exists) {\n        throw new AccountNotFoundError(\n          originalEdition,\n          'OriginalEdition',\n          `Ensure the provided mint address for the original NFT [${originalMint.toBase58()}] ` +\n            `is correct and that it has an associated OriginalEdition PDA.`\n        );\n      }\n\n      const edition = new BN(originalEditionAccount.data.supply, 'le').add(\n        new BN(1)\n      );\n      const originalEditionMarkPda = findEditionMarkerPda(\n        originalMint,\n        edition\n      );\n\n      // New NFT.\n      const newMetadata = findMetadataPda(newMint.publicKey);\n      const newEdition = findEditionPda(newMint.publicKey);\n      const lamports = await getMinimumBalanceForRentExemptMint(\n        metaplex.connection\n      );\n      const newAssociatedToken = await getAssociatedTokenAddress(\n        newMint.publicKey,\n        newOwner,\n        false,\n        tokenProgram,\n        associatedTokenProgram\n      );\n\n      const sharedInput = {\n        lamports,\n        edition,\n        newMint,\n        newMetadata,\n        newEdition,\n        newMintAuthority,\n        newUpdateAuthority,\n        newOwner,\n        newAssociatedToken,\n        newFreezeAuthority,\n        payer,\n        originalMetadata,\n        originalEdition,\n        originalEditionMarkPda,\n        tokenProgram,\n        associatedTokenProgram,\n      };\n\n      let transactionBuilder: TransactionBuilder;\n      if (operation.input.via === 'vault') {\n        transactionBuilder = printNewEditionBuilder({\n          via: 'vault',\n          vaultAuthority: operation.input.vaultAuthority,\n          safetyDepositStore: operation.input.safetyDepositStore,\n          safetyDepositBox: operation.input.safetyDepositBox,\n          vault: operation.input.vault,\n          tokenVaultProgram: operation.input.tokenVaultProgram,\n          ...sharedInput,\n        });\n      } else {\n        const originalTokenAccountOwner =\n          operation.input.originalTokenAccountOwner ?? metaplex.identity();\n        const originalTokenAccount =\n          operation.input.originalTokenAccount ??\n          (await getAssociatedTokenAddress(\n            originalMint,\n            originalTokenAccountOwner.publicKey,\n            false,\n            tokenProgram,\n            associatedTokenProgram\n          ));\n\n        transactionBuilder = printNewEditionBuilder({\n          via: 'token',\n          originalTokenAccountOwner,\n          originalTokenAccount,\n          ...sharedInput,\n        });\n      }\n\n      const { signature } = await metaplex\n        .rpc()\n        .sendAndConfirmTransaction(\n          transactionBuilder,\n          undefined,\n          confirmOptions\n        );\n\n      return {\n        mint: newMint,\n        metadata: newMetadata,\n        edition: newEdition,\n        associatedToken: newAssociatedToken,\n        transactionId: signature,\n      };\n    },\n  };\n\ntype PrintNewEditionBuilderSharedParams = {\n  // Data.\n  lamports: number;\n  edition: number | BN;\n\n  // New NFT.\n  newMint: Signer;\n  newMetadata: PublicKey;\n  newEdition: PublicKey;\n  newMintAuthority: Signer;\n  newUpdateAuthority: PublicKey;\n  newOwner: PublicKey;\n  newAssociatedToken: PublicKey;\n  newFreezeAuthority?: PublicKey;\n  payer: Signer;\n\n  // Master NFT.\n  originalMetadata: PublicKey;\n  originalEdition: PublicKey;\n  originalEditionMarkPda: PublicKey;\n\n  // Programs.\n  tokenProgram?: PublicKey;\n  associatedTokenProgram?: PublicKey;\n\n  // Instruction keys.\n  createAccountInstructionKey?: string;\n  initializeMintInstructionKey?: string;\n  createAssociatedTokenInstructionKey?: string;\n  mintToInstructionKey?: string;\n  printNewEditionInstructionKey?: string;\n};\n\nexport type PrintNewEditionBuilderParams = PrintNewEditionBuilderSharedParams &\n  (\n    | {\n        via: 'token';\n        originalTokenAccountOwner: Signer;\n        originalTokenAccount: PublicKey;\n      }\n    | {\n        via: 'vault';\n        vaultAuthority: Signer;\n        safetyDepositStore: PublicKey;\n        safetyDepositBox: PublicKey;\n        vault: PublicKey;\n        tokenVaultProgram?: PublicKey;\n      }\n  );\n\nexport const printNewEditionBuilder = (\n  params: PrintNewEditionBuilderParams\n): TransactionBuilder => {\n  const {\n    // Data.\n    lamports,\n    edition,\n\n    // New NFT.\n    newMint,\n    newMetadata,\n    newEdition,\n    newMintAuthority,\n    newUpdateAuthority,\n    newOwner,\n    newAssociatedToken,\n    newFreezeAuthority,\n    payer,\n\n    // Master NFT.\n    originalMetadata,\n    originalEdition,\n    originalEditionMarkPda,\n\n    // Programs.\n    tokenProgram,\n    associatedTokenProgram,\n\n    // Instruction keys.\n    createAccountInstructionKey,\n    initializeMintInstructionKey,\n    createAssociatedTokenInstructionKey,\n    mintToInstructionKey,\n    printNewEditionInstructionKey = 'printNewEdition',\n  } = params;\n\n  let printNewEditionInstructionWithSigners: InstructionWithSigners;\n  if (params.via === 'vault') {\n    printNewEditionInstructionWithSigners =\n      createMintNewEditionFromMasterEditionViaVaultProxyInstructionWithSigners({\n        edition,\n        newMetadata,\n        newEdition,\n        masterEdition: originalEdition,\n        newMint,\n        editionMarkPda: originalEditionMarkPda,\n        newMintAuthority,\n        payer,\n        vaultAuthority: params.vaultAuthority,\n        safetyDepositStore: params.safetyDepositStore,\n        safetyDepositBox: params.safetyDepositBox,\n        vault: params.vault,\n        newMetadataUpdateAuthority: newUpdateAuthority,\n        metadata: originalMetadata,\n        tokenVaultProgram: params.tokenVaultProgram,\n        instructionKey: printNewEditionInstructionKey,\n      });\n  } else {\n    printNewEditionInstructionWithSigners =\n      createMintNewEditionFromMasterEditionViaTokenInstructionWithSigners({\n        edition,\n        newMetadata,\n        newEdition,\n        masterEdition: originalEdition,\n        newMint,\n        editionMarkPda: originalEditionMarkPda,\n        newMintAuthority,\n        payer,\n        tokenAccountOwner: params.originalTokenAccountOwner,\n        tokenAccount: params.originalTokenAccount,\n        newMetadataUpdateAuthority: newUpdateAuthority,\n        metadata: originalMetadata,\n        instructionKey: printNewEditionInstructionKey,\n      });\n  }\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Create the mint account and send one token to the holder.\n      .add(\n        createMintAndMintToAssociatedTokenBuilder({\n          lamports,\n          decimals: 0,\n          amount: 1,\n          createAssociatedToken: true,\n          mint: newMint,\n          payer,\n          mintAuthority: newMintAuthority,\n          owner: newOwner,\n          associatedToken: newAssociatedToken,\n          freezeAuthority: newFreezeAuthority,\n          tokenProgram,\n          associatedTokenProgram,\n          createAccountInstructionKey,\n          initializeMintInstructionKey,\n          createAssociatedTokenInstructionKey,\n          mintToInstructionKey,\n        })\n      )\n\n      // Mint new edition.\n      .add(printNewEditionInstructionWithSigners)\n  );\n};\n"],"names":["Key","printNewEditionOperation","useOperation","printNewEditionOperationHandler","handle","operation","metaplex","originalMint","newMint","Keypair","generate","newMintAuthority","identity","newUpdateAuthority","publicKey","newOwner","newFreezeAuthority","payer","tokenProgram","associatedTokenProgram","confirmOptions","input","originalMetadata","findMetadataPda","originalEdition","findMasterEditionV2Pda","originalEditionAccount","parseOriginalEditionAccount","rpc","getAccount","exists","AccountNotFoundError","toBase58","edition","BN","data","supply","add","originalEditionMarkPda","findEditionMarkerPda","newMetadata","newEdition","findEditionPda","lamports","getMinimumBalanceForRentExemptMint","connection","newAssociatedToken","getAssociatedTokenAddress","sharedInput","transactionBuilder","via","printNewEditionBuilder","vaultAuthority","safetyDepositStore","safetyDepositBox","vault","tokenVaultProgram","originalTokenAccountOwner","originalTokenAccount","signature","sendAndConfirmTransaction","undefined","mint","metadata","associatedToken","transactionId","params","createAccountInstructionKey","initializeMintInstructionKey","createAssociatedTokenInstructionKey","mintToInstructionKey","printNewEditionInstructionKey","printNewEditionInstructionWithSigners","createMintNewEditionFromMasterEditionViaVaultProxyInstructionWithSigners","masterEdition","editionMarkPda","newMetadataUpdateAuthority","instructionKey","createMintNewEditionFromMasterEditionViaTokenInstructionWithSigners","tokenAccountOwner","tokenAccount","TransactionBuilder","make","setFeePayer","createMintAndMintToAssociatedTokenBuilder","decimals","amount","createAssociatedToken","mintAuthority","owner","freezeAuthority"],"mappings":"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"}