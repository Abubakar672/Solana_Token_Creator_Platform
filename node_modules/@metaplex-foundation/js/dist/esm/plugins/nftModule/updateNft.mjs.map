{"version":3,"file":"updateNft.mjs","sources":["../../../../src/plugins/nftModule/updateNft.ts"],"sourcesContent":["import { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport {\n  Collection,\n  Creator,\n  DataV2,\n  Uses,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { useOperation, Operation, Signer, OperationHandler } from '@/types';\nimport { Nft } from './Nft';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  createUpdateMetadataAccountV2InstructionWithSigners,\n  findMetadataPda,\n} from '@/programs';\nimport { TransactionBuilder } from '@/utils';\n\nconst Key = 'UpdateNftOperation' as const;\nexport const updateNftOperation = useOperation<UpdateNftOperation>(Key);\nexport type UpdateNftOperation = Operation<\n  typeof Key,\n  UpdateNftInput,\n  UpdateNftOutput\n>;\n\nexport interface UpdateNftInput {\n  nft: Nft;\n\n  // Data.\n  name?: string;\n  symbol?: string;\n  uri?: string;\n  sellerFeeBasisPoints?: number;\n  creators?: Creator[];\n  collection?: Collection;\n  uses?: Uses;\n  newUpdateAuthority?: PublicKey;\n  primarySaleHappened?: boolean;\n  isMutable?: boolean;\n\n  // Signers.\n  updateAuthority?: Signer;\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n}\n\nexport interface UpdateNftOutput {\n  transactionId: string;\n}\n\nexport const updateNftOperationHandler: OperationHandler<UpdateNftOperation> = {\n  handle: async (\n    operation: UpdateNftOperation,\n    metaplex: Metaplex\n  ): Promise<UpdateNftOutput> => {\n    const {\n      nft,\n      newUpdateAuthority = nft.updateAuthority,\n      primarySaleHappened = nft.primarySaleHappened,\n      isMutable = nft.isMutable,\n      updateAuthority = metaplex.identity(),\n      confirmOptions,\n    } = operation.input;\n\n    const data = resolveData(operation.input);\n\n    const metadata = findMetadataPda(nft.mint);\n\n    const { signature } = await metaplex.rpc().sendAndConfirmTransaction(\n      updateNftBuilder({\n        data,\n        newUpdateAuthority,\n        primarySaleHappened,\n        isMutable,\n        updateAuthority,\n        metadata,\n      }),\n      undefined,\n      confirmOptions\n    );\n\n    return { transactionId: signature };\n  },\n};\n\nconst resolveData = (input: UpdateNftInput): DataV2 => {\n  const { nft } = input;\n\n  return {\n    name: input.name ?? nft.name,\n    symbol: input.symbol ?? nft.symbol,\n    uri: input.uri ?? nft.uri,\n    sellerFeeBasisPoints:\n      input.sellerFeeBasisPoints ?? nft.sellerFeeBasisPoints,\n    creators: input.creators ?? nft.creators,\n    collection: input.collection ?? nft.collection,\n    uses: input.uses ?? nft.uses,\n  };\n};\n\nexport interface UpdateNftBuilderParams {\n  // Data.\n  data: DataV2;\n  newUpdateAuthority: PublicKey;\n  primarySaleHappened: boolean;\n  isMutable: boolean;\n\n  // Signers.\n  updateAuthority: Signer;\n\n  // Public keys.\n  metadata: PublicKey;\n\n  // Instruction keys.\n  instructionKey?: string;\n}\n\nexport const updateNftBuilder = (\n  params: UpdateNftBuilderParams\n): TransactionBuilder => {\n  const {\n    data,\n    isMutable,\n    updateAuthority,\n    newUpdateAuthority,\n    primarySaleHappened,\n    metadata,\n    instructionKey,\n  } = params;\n\n  return TransactionBuilder.make().add(\n    createUpdateMetadataAccountV2InstructionWithSigners({\n      data,\n      newUpdateAuthority,\n      primarySaleHappened,\n      isMutable,\n      metadata,\n      updateAuthority,\n      instructionKey,\n    })\n  );\n};\n"],"names":["Key","updateNftOperation","useOperation","updateNftOperationHandler","handle","operation","metaplex","nft","newUpdateAuthority","updateAuthority","primarySaleHappened","isMutable","identity","confirmOptions","input","data","resolveData","metadata","findMetadataPda","mint","signature","rpc","sendAndConfirmTransaction","updateNftBuilder","undefined","transactionId","name","symbol","uri","sellerFeeBasisPoints","creators","collection","uses","params","instructionKey","TransactionBuilder","make","add","createUpdateMetadataAccountV2InstructionWithSigners"],"mappings":"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"}