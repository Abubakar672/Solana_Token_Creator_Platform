{"version":3,"file":"uploadMetadata.mjs","sources":["../../../../src/plugins/nftModule/uploadMetadata.ts"],"sourcesContent":["import cloneDeep from 'lodash.clonedeep';\nimport { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, useOperation } from '@/types';\nimport { walk } from '@/utils';\nimport { JsonMetadata } from './JsonMetadata';\nimport { isMetaplexFile, MetaplexFile } from '../storageModule';\n\nconst Key = 'UploadMetadataOperation' as const;\nexport const uploadMetadataOperation =\n  useOperation<UploadMetadataOperation>(Key);\nexport type UploadMetadataOperation = Operation<\n  typeof Key,\n  UploadMetadataInput,\n  UploadMetadataOutput\n>;\n\nexport type UploadMetadataInput = JsonMetadata<MetaplexFile | string>;\n\nexport interface UploadMetadataOutput {\n  metadata: JsonMetadata;\n  assetUris: string[];\n  uri: string;\n}\n\nexport const uploadMetadataOperationHandler: OperationHandler<UploadMetadataOperation> =\n  {\n    handle: async (\n      operation: UploadMetadataOperation,\n      metaplex: Metaplex\n    ): Promise<UploadMetadataOutput> => {\n      const rawMetadata = operation.input;\n      const files = getAssetsFromJsonMetadata(rawMetadata);\n      const assetUris = await metaplex.storage().uploadAll(files);\n      const metadata = replaceAssetsWithUris(rawMetadata, assetUris);\n      const uri = await metaplex.storage().uploadJson(metadata);\n\n      return { uri, metadata, assetUris };\n    },\n  };\n\nexport const getAssetsFromJsonMetadata = (\n  input: UploadMetadataInput\n): MetaplexFile[] => {\n  const files: MetaplexFile[] = [];\n\n  walk(input, (next, value) => {\n    if (isMetaplexFile(value)) {\n      files.push(value);\n    } else {\n      next(value);\n    }\n  });\n\n  return files;\n};\n\nexport const replaceAssetsWithUris = (\n  input: UploadMetadataInput,\n  replacements: string[]\n): JsonMetadata => {\n  const clone = cloneDeep(input);\n  let index = 0;\n\n  walk(clone, (next, value, key, parent) => {\n    if (isMetaplexFile(value) && index < replacements.length) {\n      parent[key] = replacements[index++];\n    }\n\n    next(value);\n  });\n\n  return clone as JsonMetadata;\n};\n"],"names":["Key","uploadMetadataOperation","useOperation","uploadMetadataOperationHandler","handle","operation","metaplex","rawMetadata","input","files","getAssetsFromJsonMetadata","assetUris","storage","uploadAll","metadata","replaceAssetsWithUris","uri","uploadJson","walk","next","value","isMetaplexFile","push","replacements","clone","cloneDeep","index","key","parent","length"],"mappings":";;;;;AAOA,MAAMA,GAAG,GAAG,yBAAZ,CAAA;MACaC,uBAAuB,GAClCC,YAAY,CAA0BF,GAA1B,EADP;AAgBA,MAAMG,8BAAyE,GACpF;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,KAG4B;AAClC,IAAA,MAAMC,WAAW,GAAGF,SAAS,CAACG,KAA9B,CAAA;AACA,IAAA,MAAMC,KAAK,GAAGC,yBAAyB,CAACH,WAAD,CAAvC,CAAA;IACA,MAAMI,SAAS,GAAG,MAAML,QAAQ,CAACM,OAAT,EAAmBC,CAAAA,SAAnB,CAA6BJ,KAA7B,CAAxB,CAAA;AACA,IAAA,MAAMK,QAAQ,GAAGC,qBAAqB,CAACR,WAAD,EAAcI,SAAd,CAAtC,CAAA;IACA,MAAMK,GAAG,GAAG,MAAMV,QAAQ,CAACM,OAAT,EAAmBK,CAAAA,UAAnB,CAA8BH,QAA9B,CAAlB,CAAA;IAEA,OAAO;MAAEE,GAAF;MAAOF,QAAP;AAAiBH,MAAAA,SAAAA;KAAxB,CAAA;AACD,GAAA;AAZH,EADK;AAgBMD,MAAAA,yBAAyB,GACpCF,KADuC,IAEpB;EACnB,MAAMC,KAAqB,GAAG,EAA9B,CAAA;AAEAS,EAAAA,IAAI,CAACV,KAAD,EAAQ,CAACW,IAAD,EAAOC,KAAP,KAAiB;AAC3B,IAAA,IAAIC,cAAc,CAACD,KAAD,CAAlB,EAA2B;MACzBX,KAAK,CAACa,IAAN,CAAWF,KAAX,CAAA,CAAA;AACD,KAFD,MAEO;MACLD,IAAI,CAACC,KAAD,CAAJ,CAAA;AACD,KAAA;AACF,GANG,CAAJ,CAAA;AAQA,EAAA,OAAOX,KAAP,CAAA;AACD,EAdM;MAgBMM,qBAAqB,GAAG,CACnCP,KADmC,EAEnCe,YAFmC,KAGlB;AACjB,EAAA,MAAMC,KAAK,GAAGC,SAAS,CAACjB,KAAD,CAAvB,CAAA;EACA,IAAIkB,KAAK,GAAG,CAAZ,CAAA;EAEAR,IAAI,CAACM,KAAD,EAAQ,CAACL,IAAD,EAAOC,KAAP,EAAcO,GAAd,EAAmBC,MAAnB,KAA8B;IACxC,IAAIP,cAAc,CAACD,KAAD,CAAd,IAAyBM,KAAK,GAAGH,YAAY,CAACM,MAAlD,EAA0D;MACxDD,MAAM,CAACD,GAAD,CAAN,GAAcJ,YAAY,CAACG,KAAK,EAAN,CAA1B,CAAA;AACD,KAAA;;IAEDP,IAAI,CAACC,KAAD,CAAJ,CAAA;AACD,GANG,CAAJ,CAAA;AAQA,EAAA,OAAOI,KAAP,CAAA;AACD;;;;"}