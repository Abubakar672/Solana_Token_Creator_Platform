{"version":3,"file":"BundlrStorageDriver.mjs","sources":["../../../../src/plugins/bundlrStorage/BundlrStorageDriver.ts"],"sourcesContent":["import type { default as NodeBundlr, WebBundlr } from '@bundlr-network/client';\nimport * as BundlrPackage from '@bundlr-network/client';\nimport BigNumber from 'bignumber.js';\nimport BN from 'bn.js';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Amount,\n  IdentitySigner,\n  isKeypairSigner,\n  KeypairSigner,\n  lamports,\n  Signer,\n} from '@/types';\nimport {\n  AssetUploadFailedError,\n  BundlrWithdrawError,\n  FailedToConnectToBundlrAddressError,\n  FailedToInitializeBundlrError,\n} from '@/errors';\nimport {\n  getBytesFromMetaplexFiles,\n  MetaplexFile,\n  MetaplexFileTag,\n  StorageDriver,\n} from '../storageModule';\nimport {\n  Connection,\n  PublicKey,\n  SendOptions,\n  Signer as Web3Signer,\n  Transaction,\n  TransactionSignature,\n} from '@solana/web3.js';\n\nexport type BundlrOptions = {\n  address?: string;\n  timeout?: number;\n  providerUrl?: string;\n  priceMultiplier?: number;\n  identity?: Signer;\n};\n\nexport type BundlrWalletAdapter = {\n  publicKey: PublicKey | null;\n  signMessage?: (message: Uint8Array) => Promise<Uint8Array>;\n  signTransaction?: (transaction: Transaction) => Promise<Transaction>;\n  signAllTransactions?: (transactions: Transaction[]) => Promise<Transaction[]>;\n  sendTransaction: (\n    transaction: Transaction,\n    connection: Connection,\n    options?: SendOptions & { signers?: Web3Signer[] }\n  ) => Promise<TransactionSignature>;\n};\n\nexport class BundlrStorageDriver implements StorageDriver {\n  protected _metaplex: Metaplex;\n  protected _bundlr: WebBundlr | NodeBundlr | null = null;\n  protected _options: BundlrOptions;\n\n  constructor(metaplex: Metaplex, options: BundlrOptions = {}) {\n    this._metaplex = metaplex;\n    this._options = {\n      providerUrl: metaplex.connection.rpcEndpoint,\n      ...options,\n    };\n  }\n\n  async getUploadPrice(bytes: number): Promise<Amount> {\n    const bundlr = await this.bundlr();\n    const price = await bundlr.getPrice(bytes);\n\n    return bigNumberToAmount(\n      price.multipliedBy(this._options.priceMultiplier ?? 1.5)\n    );\n  }\n\n  async upload(file: MetaplexFile): Promise<string> {\n    const [uri] = await this.uploadAll([file]);\n\n    return uri;\n  }\n\n  async uploadAll(files: MetaplexFile[]): Promise<string[]> {\n    const bundlr = await this.bundlr();\n    const amount = await this.getUploadPrice(\n      getBytesFromMetaplexFiles(...files)\n    );\n    await this.fund(amount);\n\n    const promises = files.map(async (file) => {\n      const { status, data } = await bundlr.uploader.upload(\n        file.buffer,\n        getMetaplexFileTagsWithContentType(file)\n      );\n\n      if (status >= 300) {\n        throw new AssetUploadFailedError(status);\n      }\n\n      return `https://arweave.net/${data.id}`;\n    });\n\n    return await Promise.all(promises);\n  }\n\n  async getBalance(): Promise<Amount> {\n    const bundlr = await this.bundlr();\n    const balance = await bundlr.getLoadedBalance();\n\n    return bigNumberToAmount(balance);\n  }\n\n  async fund(amount: Amount, skipBalanceCheck = false): Promise<void> {\n    const bundlr = await this.bundlr();\n    let toFund = amountToBigNumber(amount);\n\n    if (!skipBalanceCheck) {\n      const balance = await bundlr.getLoadedBalance();\n\n      toFund = toFund.isGreaterThan(balance)\n        ? toFund.minus(balance)\n        : new BigNumber(0);\n    }\n\n    if (toFund.isLessThanOrEqualTo(0)) {\n      return;\n    }\n\n    // TODO: Catch errors and wrap in BundlrErrors.\n    await bundlr.fund(toFund);\n  }\n\n  async withdrawAll(): Promise<void> {\n    // TODO(loris): Replace with \"withdrawAll\" when available on Bundlr.\n    const bundlr = await this.bundlr();\n    const balance = await bundlr.getLoadedBalance();\n    const minimumBalance = new BigNumber(5000);\n\n    if (balance.isLessThan(minimumBalance)) {\n      return;\n    }\n\n    const balanceToWithdraw = balance.minus(minimumBalance);\n    await this.withdraw(bigNumberToAmount(balanceToWithdraw));\n  }\n\n  async withdraw(amount: Amount): Promise<void> {\n    const bundlr = await this.bundlr();\n\n    const { status } = await bundlr.withdrawBalance(amountToBigNumber(amount));\n\n    if (status >= 300) {\n      throw new BundlrWithdrawError(status);\n    }\n  }\n\n  async bundlr(): Promise<WebBundlr | NodeBundlr> {\n    if (this._bundlr) {\n      return this._bundlr;\n    }\n\n    return (this._bundlr = await this.initBundlr());\n  }\n\n  async initBundlr(): Promise<WebBundlr | NodeBundlr> {\n    const currency = 'solana';\n    const address = this._options?.address ?? 'https://node1.bundlr.network';\n    const options = {\n      timeout: this._options.timeout,\n      providerUrl: this._options.providerUrl,\n    };\n\n    const identity: Signer =\n      this._options.identity ?? this._metaplex.identity();\n    const bundlr = isKeypairSigner(identity)\n      ? this.initNodeBundlr(address, currency, identity, options)\n      : await this.initWebBundlr(address, currency, identity, options);\n\n    try {\n      // Check for valid bundlr node.\n      await bundlr.utils.getBundlerAddress(currency);\n    } catch (error) {\n      throw new FailedToConnectToBundlrAddressError(address, error as Error);\n    }\n\n    return bundlr;\n  }\n\n  initNodeBundlr(\n    address: string,\n    currency: string,\n    keypair: KeypairSigner,\n    options: any\n  ): NodeBundlr {\n    return new BundlrPackage.default(\n      address,\n      currency,\n      keypair.secretKey,\n      options\n    );\n  }\n\n  async initWebBundlr(\n    address: string,\n    currency: string,\n    identity: IdentitySigner,\n    options: any\n  ): Promise<WebBundlr> {\n    const wallet: BundlrWalletAdapter = {\n      publicKey: identity.publicKey,\n      signMessage: (message: Uint8Array) => identity.signMessage(message),\n      signTransaction: (transaction: Transaction) =>\n        identity.signTransaction(transaction),\n      signAllTransactions: (transactions: Transaction[]) =>\n        identity.signAllTransactions(transactions),\n      sendTransaction: (\n        transaction: Transaction,\n        connection: Connection,\n        options: SendOptions & { signers?: Web3Signer[] } = {}\n      ): Promise<TransactionSignature> => {\n        const { signers, ...sendOptions } = options;\n\n        if ('rpc' in this._metaplex) {\n          return this._metaplex\n            .rpc()\n            .sendTransaction(transaction, signers, sendOptions);\n        }\n\n        return connection.sendTransaction(\n          transaction,\n          signers ?? [],\n          sendOptions\n        );\n      },\n    };\n\n    const bundlr = new BundlrPackage.WebBundlr(\n      address,\n      currency,\n      wallet,\n      options\n    );\n\n    try {\n      // Try to initiate bundlr.\n      await bundlr.ready();\n    } catch (error) {\n      throw new FailedToInitializeBundlrError(error as Error);\n    }\n\n    return bundlr;\n  }\n}\n\nexport const isBundlrStorageDriver = (\n  storageDriver: StorageDriver\n): storageDriver is BundlrStorageDriver => {\n  return (\n    'bundlr' in storageDriver &&\n    'getBalance' in storageDriver &&\n    'fund' in storageDriver &&\n    'withdrawAll' in storageDriver\n  );\n};\n\nconst bigNumberToAmount = (bigNumber: BigNumber): Amount => {\n  return lamports(new BN(bigNumber.decimalPlaces(0).toString()));\n};\n\nconst amountToBigNumber = (amount: Amount): BigNumber => {\n  return new BigNumber(amount.basisPoints.toString());\n};\n\nconst getMetaplexFileTagsWithContentType = (\n  file: MetaplexFile\n): MetaplexFileTag[] => {\n  if (!file.contentType) {\n    return file.tags;\n  }\n\n  return [{ name: 'Content-Type', value: file.contentType }, ...file.tags];\n};\n"],"names":["BundlrStorageDriver","constructor","metaplex","options","_metaplex","_options","providerUrl","connection","rpcEndpoint","getUploadPrice","bytes","bundlr","price","getPrice","bigNumberToAmount","multipliedBy","priceMultiplier","upload","file","uri","uploadAll","files","amount","getBytesFromMetaplexFiles","fund","promises","map","status","data","uploader","buffer","getMetaplexFileTagsWithContentType","AssetUploadFailedError","id","Promise","all","getBalance","balance","getLoadedBalance","skipBalanceCheck","toFund","amountToBigNumber","isGreaterThan","minus","BigNumber","isLessThanOrEqualTo","withdrawAll","minimumBalance","isLessThan","balanceToWithdraw","withdraw","withdrawBalance","BundlrWithdrawError","_bundlr","initBundlr","currency","address","timeout","identity","isKeypairSigner","initNodeBundlr","initWebBundlr","utils","getBundlerAddress","error","FailedToConnectToBundlrAddressError","keypair","BundlrPackage","default","secretKey","wallet","publicKey","signMessage","message","signTransaction","transaction","signAllTransactions","transactions","sendTransaction","signers","sendOptions","rpc","WebBundlr","ready","FailedToInitializeBundlrError","isBundlrStorageDriver","storageDriver","bigNumber","lamports","BN","decimalPlaces","toString","basisPoints","contentType","tags","name","value"],"mappings":"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"}