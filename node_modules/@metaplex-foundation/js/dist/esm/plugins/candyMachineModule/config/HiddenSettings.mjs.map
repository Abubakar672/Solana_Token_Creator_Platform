{"version":3,"file":"HiddenSettings.mjs","sources":["../../../../../src/plugins/candyMachineModule/config/HiddenSettings.ts"],"sourcesContent":["import { HiddenSettings } from '@metaplex-foundation/mpl-candy-machine';\n\n/**\n * Configures {@link CandyMachineConfig.hiddenSettings}\n *\n * Hidden settings serve two purposes. First, it allows the creation of larger\n * drops (20k+), since the metadata is not stored on-chain. In turn, this also\n * allows the creation of hide-and-reveal drops, where users discover which\n * item(s) they minted after the mint is complete.\n *\n * Once hidden settings are enabled, every mint will have the same URI and the\n * name will be created by appending the mint number (e.g., “#45”) to the name\n * specified. The hash is expected to be a 32 character string corresponding to\n * the hash of a cache file that has the mapping between a mint number and the\n * actual metadata URI. This allows the order of the mint to be verified by\n * others after the mint is complete.\n *\n * Since the metadata is not on-chain, it is possible to create very large\n * drops. The only caveat is that there is a need for an off-chain process to\n * update the metadata for each item. This is important otherwise all items\n * will have the same metadata.\n *\n * @property name - Name of the mint. The number of the mint will be appended to the name.\n * @property uri - Single URI for all mints.\n * @property hash - 32 character hash. In most cases this is the hash of the cache file with\n * the mapping between mint number and metadata so that the order can be verified when the mint\n * is complete\n */\nexport type HiddenSettingsConfig = {\n  name: string;\n  uri: string;\n  // Uint8Array\n  hash: string;\n};\n\nexport function hiddenSettingsFromConfig(\n  config?: HiddenSettingsConfig\n): HiddenSettings | undefined {\n  if (config == null) return undefined;\n  const hash = Buffer.from(config.hash, 'utf8').toJSON().data;\n  return { ...config, hash };\n}\n"],"names":["hiddenSettingsFromConfig","config","undefined","hash","Buffer","from","toJSON","data"],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQO,SAASA,wBAAT,CACLC,MADK,EAEuB;AAC5B,EAAA,IAAIA,MAAM,IAAI,IAAd,EAAoB,OAAOC,SAAP,CAAA;AACpB,EAAA,MAAMC,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYJ,MAAM,CAACE,IAAnB,EAAyB,MAAzB,CAAiCG,CAAAA,MAAjC,GAA0CC,IAAvD,CAAA;EACA,OAAO,EAAE,GAAGN,MAAL;AAAaE,IAAAA,IAAAA;GAApB,CAAA;AACD;;;;"}