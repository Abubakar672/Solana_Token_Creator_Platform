{"version":3,"file":"Client.create.mjs","sources":["../../../../src/plugins/candyMachineModule/Client.create.ts"],"sourcesContent":["import { ConfirmOptions, Keypair, PublicKey } from '@solana/web3.js';\nimport { convertToPublickKey, Signer } from '@/types';\nimport { CreatedCandyMachineNotFoundError } from '@/errors';\nimport {\n  CandyMachineConfigWithoutStorage,\n  candyMachineDataFromConfig,\n} from './config';\nimport {\n  CreateCandyMachineInput,\n  createCandyMachineOperation,\n  CreateCandyMachineOutput,\n} from './createCandyMachine';\nimport { CandyMachine } from './CandyMachine';\nimport type { CandyMachineClient } from './CandyMachineClient';\n\nexport type CandyMachineInitFromConfigOpts = {\n  candyMachineSigner?: Signer;\n  authorityAddress?: PublicKey;\n  confirmOptions?: ConfirmOptions;\n};\n\nexport async function create(\n  this: CandyMachineClient,\n  input: CreateCandyMachineInput\n): Promise<CreateCandyMachineOutput & { candyMachine: CandyMachine }> {\n  const operation = createCandyMachineOperation(input);\n  const output = await this.metaplex.operations().execute(operation);\n\n  const candyMachine = await this.findByAddress(\n    output.candyMachineSigner.publicKey\n  );\n  if (candyMachine === null) {\n    throw new CreatedCandyMachineNotFoundError(\n      output.candyMachineSigner.publicKey\n    );\n  }\n\n  return { candyMachine, ...output };\n}\n\nexport async function createFromConfig(\n  this: CandyMachineClient,\n  config: CandyMachineConfigWithoutStorage,\n  opts: CandyMachineInitFromConfigOpts\n): Promise<CreateCandyMachineOutput & { candyMachine: CandyMachine }> {\n  const { candyMachineSigner = Keypair.generate() } = opts;\n  const candyMachineData = candyMachineDataFromConfig(\n    config,\n    candyMachineSigner.publicKey\n  );\n  const walletAddress = convertToPublickKey(config.solTreasuryAccount);\n\n  return this.create({\n    candyMachineSigner,\n    walletAddress,\n    authorityAddress: opts.authorityAddress,\n    ...candyMachineData,\n  });\n}\n"],"names":["create","input","operation","createCandyMachineOperation","output","metaplex","operations","execute","candyMachine","findByAddress","candyMachineSigner","publicKey","CreatedCandyMachineNotFoundError","createFromConfig","config","opts","Keypair","generate","candyMachineData","candyMachineDataFromConfig","walletAddress","convertToPublickKey","solTreasuryAccount","authorityAddress"],"mappings":";;;;;;AAqBO,eAAeA,MAAf,CAELC,KAFK,EAG+D;AACpE,EAAA,MAAMC,SAAS,GAAGC,2BAA2B,CAACF,KAAD,CAA7C,CAAA;EACA,MAAMG,MAAM,GAAG,MAAM,IAAKC,CAAAA,QAAL,CAAcC,UAAd,EAA2BC,CAAAA,OAA3B,CAAmCL,SAAnC,CAArB,CAAA;EAEA,MAAMM,YAAY,GAAG,MAAM,IAAKC,CAAAA,aAAL,CACzBL,MAAM,CAACM,kBAAP,CAA0BC,SADD,CAA3B,CAAA;;EAGA,IAAIH,YAAY,KAAK,IAArB,EAA2B;IACzB,MAAM,IAAII,gCAAJ,CACJR,MAAM,CAACM,kBAAP,CAA0BC,SADtB,CAAN,CAAA;AAGD,GAAA;;EAED,OAAO;IAAEH,YAAF;IAAgB,GAAGJ,MAAAA;GAA1B,CAAA;AACD,CAAA;AAEM,eAAeS,gBAAf,CAELC,MAFK,EAGLC,IAHK,EAI+D;EACpE,MAAM;IAAEL,kBAAkB,GAAGM,OAAO,CAACC,QAAR,EAAA;AAAvB,GAAA,GAA8CF,IAApD,CAAA;EACA,MAAMG,gBAAgB,GAAGC,0BAA0B,CACjDL,MADiD,EAEjDJ,kBAAkB,CAACC,SAF8B,CAAnD,CAAA;AAIA,EAAA,MAAMS,aAAa,GAAGC,mBAAmB,CAACP,MAAM,CAACQ,kBAAR,CAAzC,CAAA;EAEA,OAAO,IAAA,CAAKtB,MAAL,CAAY;IACjBU,kBADiB;IAEjBU,aAFiB;IAGjBG,gBAAgB,EAAER,IAAI,CAACQ,gBAHN;IAIjB,GAAGL,gBAAAA;AAJc,GAAZ,CAAP,CAAA;AAMD;;;;"}