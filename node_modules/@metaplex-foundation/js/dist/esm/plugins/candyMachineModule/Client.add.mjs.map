{"version":3,"file":"Client.add.mjs","sources":["../../../../src/plugins/candyMachineModule/Client.add.ts"],"sourcesContent":["import { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { Signer } from '@/types';\nimport {\n  CandyMachineToUpdateNotFoundError,\n  UpdatedCandyMachineNotFoundError,\n} from '@/errors';\nimport { ConfigLine } from '@metaplex-foundation/mpl-candy-machine';\nimport { AddConfigLinesInput, addConfigLinesOperation } from './addConfigLines';\nimport {\n  assertAllConfigLineConstraints,\n  assertCanAdd,\n  assertNotFull,\n} from './Client.helpers';\nimport type { CandyMachineClient } from './CandyMachineClient';\n\nexport type AddAssetsToCandyMachineParams = {\n  // Accounts\n  candyMachineAddress: PublicKey;\n  authoritySigner: Signer;\n\n  // Args\n  assets: ConfigLine[];\n\n  // Transaction Options.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport async function addAssets(\n  this: CandyMachineClient,\n  params: AddAssetsToCandyMachineParams\n) {\n  const currentCandyMachine = await this.findByAddress(\n    params.candyMachineAddress\n  );\n  if (currentCandyMachine == null) {\n    throw new CandyMachineToUpdateNotFoundError(params.candyMachineAddress);\n  }\n\n  const index = currentCandyMachine.assetsCount;\n\n  assertNotFull(currentCandyMachine, index);\n  assertCanAdd(currentCandyMachine, index, params.assets.length);\n  assertAllConfigLineConstraints(params.assets);\n\n  const addConfigLinesInput: AddConfigLinesInput = {\n    candyMachineAddress: params.candyMachineAddress,\n    authoritySigner: params.authoritySigner,\n    index,\n    configLines: params.assets,\n  };\n\n  const addConfigLinesOutput = await this.metaplex\n    .operations()\n    .execute(addConfigLinesOperation(addConfigLinesInput));\n\n  const candyMachine = await this.findByAddress(params.candyMachineAddress);\n  if (currentCandyMachine == null) {\n    throw new UpdatedCandyMachineNotFoundError(params.candyMachineAddress);\n  }\n\n  return {\n    candyMachine,\n    ...addConfigLinesOutput,\n  };\n}\n"],"names":["addAssets","params","currentCandyMachine","findByAddress","candyMachineAddress","CandyMachineToUpdateNotFoundError","index","assetsCount","assertNotFull","assertCanAdd","assets","length","assertAllConfigLineConstraints","addConfigLinesInput","authoritySigner","configLines","addConfigLinesOutput","metaplex","operations","execute","addConfigLinesOperation","candyMachine","UpdatedCandyMachineNotFoundError"],"mappings":";;;;AA2BO,eAAeA,SAAf,CAELC,MAFK,EAGL;EACA,MAAMC,mBAAmB,GAAG,MAAM,IAAA,CAAKC,aAAL,CAChCF,MAAM,CAACG,mBADyB,CAAlC,CAAA;;EAGA,IAAIF,mBAAmB,IAAI,IAA3B,EAAiC;AAC/B,IAAA,MAAM,IAAIG,iCAAJ,CAAsCJ,MAAM,CAACG,mBAA7C,CAAN,CAAA;AACD,GAAA;;AAED,EAAA,MAAME,KAAK,GAAGJ,mBAAmB,CAACK,WAAlC,CAAA;AAEAC,EAAAA,aAAa,CAACN,mBAAD,EAAsBI,KAAtB,CAAb,CAAA;EACAG,YAAY,CAACP,mBAAD,EAAsBI,KAAtB,EAA6BL,MAAM,CAACS,MAAP,CAAcC,MAA3C,CAAZ,CAAA;AACAC,EAAAA,8BAA8B,CAACX,MAAM,CAACS,MAAR,CAA9B,CAAA;AAEA,EAAA,MAAMG,mBAAwC,GAAG;IAC/CT,mBAAmB,EAAEH,MAAM,CAACG,mBADmB;IAE/CU,eAAe,EAAEb,MAAM,CAACa,eAFuB;IAG/CR,KAH+C;IAI/CS,WAAW,EAAEd,MAAM,CAACS,MAAAA;GAJtB,CAAA;AAOA,EAAA,MAAMM,oBAAoB,GAAG,MAAM,IAAA,CAAKC,QAAL,CAChCC,UADgC,EAEhCC,CAAAA,OAFgC,CAExBC,uBAAuB,CAACP,mBAAD,CAFC,CAAnC,CAAA;EAIA,MAAMQ,YAAY,GAAG,MAAM,IAAA,CAAKlB,aAAL,CAAmBF,MAAM,CAACG,mBAA1B,CAA3B,CAAA;;EACA,IAAIF,mBAAmB,IAAI,IAA3B,EAAiC;AAC/B,IAAA,MAAM,IAAIoB,gCAAJ,CAAqCrB,MAAM,CAACG,mBAA5C,CAAN,CAAA;AACD,GAAA;;EAED,OAAO;IACLiB,YADK;IAEL,GAAGL,oBAAAA;GAFL,CAAA;AAID;;;;"}