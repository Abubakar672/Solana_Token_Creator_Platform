{"version":3,"file":"createCandyMachine.mjs","sources":["../../../../src/plugins/candyMachineModule/createCandyMachine.ts"],"sourcesContent":["import {\n  ConfirmOptions,\n  Keypair,\n  PublicKey,\n  RpcResponseAndContext,\n  SignatureResult,\n} from '@solana/web3.js';\nimport {\n  CandyMachineData,\n  PROGRAM_ID as CANDY_MACHINE_PROGRAM_ID,\n} from '@metaplex-foundation/mpl-candy-machine';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  useOperation,\n  Signer,\n  OperationHandler,\n  HasMetaplex,\n} from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport {\n  createAccountBuilder,\n  createInitializeCandyMachineInstructionWithSigners,\n} from '@/programs';\nimport { getSpaceForCandy } from '@/programs/candyMachine/accounts/candyMachineInternals';\n\nconst Key = 'CreateCandyMachineOperation' as const;\nexport const createCandyMachineOperation =\n  useOperation<CreateCandyMachineOperation>(Key);\nexport type CreateCandyMachineOperation = Operation<\n  typeof Key,\n  CreateCandyMachineInput,\n  CreateCandyMachineOutput\n>;\n\nexport type CreateCandyMachineInput = CandyMachineData & {\n  // Accounts.\n  candyMachineSigner?: Signer;\n  payerSigner?: Signer;\n  walletAddress?: PublicKey;\n  authorityAddress?: PublicKey;\n\n  // Transaction Options.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type CreateCandyMachineOutput = {\n  // Accounts.\n  candyMachineSigner: Signer;\n  payerSigner: Signer;\n  walletAddress: PublicKey;\n  authorityAddress: PublicKey;\n\n  // Transaction Result.\n  transactionId: string;\n  confirmResponse: RpcResponseAndContext<SignatureResult>;\n};\n\nexport const createCandyMachineOperationHandler: OperationHandler<CreateCandyMachineOperation> =\n  {\n    async handle(\n      operation: CreateCandyMachineOperation,\n      metaplex: Metaplex\n    ): Promise<CreateCandyMachineOutput> {\n      const {\n        candyMachineSigner = Keypair.generate(),\n        payerSigner = metaplex.identity(),\n        walletAddress = payerSigner.publicKey,\n        authorityAddress = payerSigner.publicKey,\n        confirmOptions,\n        ...candyMachineData\n      } = operation.input;\n\n      const { signature, confirmResponse } = await metaplex\n        .rpc()\n        .sendAndConfirmTransaction(\n          await createCandyMachineBuilder({\n            metaplex,\n            payerSigner,\n            candyMachineSigner,\n            walletAddress,\n            authorityAddress,\n            confirmOptions,\n            ...candyMachineData,\n          }),\n          undefined,\n          confirmOptions\n        );\n\n      return {\n        // Accounts.\n        payerSigner,\n        candyMachineSigner,\n        walletAddress,\n        authorityAddress,\n\n        // Transaction Result.\n        transactionId: signature,\n        confirmResponse,\n      };\n    },\n  };\n\nexport type CreateCandyMachineBuilderParams = HasMetaplex &\n  CandyMachineData & {\n    // Accounts.\n    candyMachineSigner: Signer;\n    payerSigner: Signer;\n    walletAddress: PublicKey;\n    authorityAddress: PublicKey;\n\n    // Instruction keys.\n    createAccountInstructionKey?: string;\n    initializeCandyMachineInstructionKey?: string;\n\n    // Transaction Options.\n    confirmOptions?: ConfirmOptions;\n  };\n\nexport const createCandyMachineBuilder = async (\n  params: CreateCandyMachineBuilderParams\n): Promise<TransactionBuilder> => {\n  const {\n    metaplex,\n    candyMachineSigner,\n    payerSigner,\n    walletAddress,\n    authorityAddress,\n    createAccountInstructionKey,\n    initializeCandyMachineInstructionKey,\n\n    ...candyMachineData\n  } = params;\n\n  const space = getSpaceForCandy(candyMachineData);\n  const lamports = await metaplex.connection.getMinimumBalanceForRentExemption(\n    space\n  );\n\n  return TransactionBuilder.make()\n    .add(\n      createAccountBuilder({\n        payer: payerSigner,\n        newAccount: candyMachineSigner,\n        space,\n        lamports,\n        program: CANDY_MACHINE_PROGRAM_ID,\n        instructionKey: createAccountInstructionKey,\n      })\n    )\n    .add(\n      createInitializeCandyMachineInstructionWithSigners({\n        data: candyMachineData,\n        candyMachine: candyMachineSigner,\n        payer: payerSigner,\n        wallet: walletAddress,\n        authority: authorityAddress,\n        instructionKey: initializeCandyMachineInstructionKey,\n      })\n    );\n};\n"],"names":["Key","createCandyMachineOperation","useOperation","createCandyMachineOperationHandler","handle","operation","metaplex","candyMachineSigner","Keypair","generate","payerSigner","identity","walletAddress","publicKey","authorityAddress","confirmOptions","candyMachineData","input","signature","confirmResponse","rpc","sendAndConfirmTransaction","createCandyMachineBuilder","undefined","transactionId","params","createAccountInstructionKey","initializeCandyMachineInstructionKey","space","getSpaceForCandy","lamports","connection","getMinimumBalanceForRentExemption","TransactionBuilder","make","add","createAccountBuilder","payer","newAccount","program","CANDY_MACHINE_PROGRAM_ID","instructionKey","createInitializeCandyMachineInstructionWithSigners","data","candyMachine","wallet","authority"],"mappings":";;;;;;;;AA0BA,MAAMA,GAAG,GAAG,6BAAZ,CAAA;MACaC,2BAA2B,GACtCC,YAAY,CAA8BF,GAA9B,EADP;AA+BA,MAAMG,kCAAiF,GAC5F;AACE,EAAA,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGqC;IACnC,MAAM;AACJC,MAAAA,kBAAkB,GAAGC,OAAO,CAACC,QAAR,EADjB;AAEJC,MAAAA,WAAW,GAAGJ,QAAQ,CAACK,QAAT,EAFV;MAGJC,aAAa,GAAGF,WAAW,CAACG,SAHxB;MAIJC,gBAAgB,GAAGJ,WAAW,CAACG,SAJ3B;MAKJE,cALI;MAMJ,GAAGC,gBAAAA;KACDX,GAAAA,SAAS,CAACY,KAPd,CAAA;IASA,MAAM;MAAEC,SAAF;AAAaC,MAAAA,eAAAA;KAAoB,GAAA,MAAMb,QAAQ,CAClDc,GAD0C,GAE1CC,yBAF0C,CAGzC,MAAMC,yBAAyB,CAAC;MAC9BhB,QAD8B;MAE9BI,WAF8B;MAG9BH,kBAH8B;MAI9BK,aAJ8B;MAK9BE,gBAL8B;MAM9BC,cAN8B;MAO9B,GAAGC,gBAAAA;AAP2B,KAAD,CAHU,EAYzCO,SAZyC,EAazCR,cAbyC,CAA7C,CAAA;IAgBA,OAAO;AACL;MACAL,WAFK;MAGLH,kBAHK;MAILK,aAJK;MAKLE,gBALK;AAOL;AACAU,MAAAA,aAAa,EAAEN,SARV;AASLC,MAAAA,eAAAA;KATF,CAAA;AAWD,GAAA;;AAzCH,EADK;AA6DMG,MAAAA,yBAAyB,GAAG,MACvCG,MADuC,IAEP;EAChC,MAAM;IACJnB,QADI;IAEJC,kBAFI;IAGJG,WAHI;IAIJE,aAJI;IAKJE,gBALI;IAMJY,2BANI;IAOJC,oCAPI;IASJ,GAAGX,gBAAAA;AATC,GAAA,GAUFS,MAVJ,CAAA;AAYA,EAAA,MAAMG,KAAK,GAAGC,gBAAgB,CAACb,gBAAD,CAA9B,CAAA;EACA,MAAMc,QAAQ,GAAG,MAAMxB,QAAQ,CAACyB,UAAT,CAAoBC,iCAApB,CACrBJ,KADqB,CAAvB,CAAA;AAIA,EAAA,OAAOK,kBAAkB,CAACC,IAAnB,GACJC,GADI,CAEHC,oBAAoB,CAAC;AACnBC,IAAAA,KAAK,EAAE3B,WADY;AAEnB4B,IAAAA,UAAU,EAAE/B,kBAFO;IAGnBqB,KAHmB;IAInBE,QAJmB;AAKnBS,IAAAA,OAAO,EAAEC,UALU;AAMnBC,IAAAA,cAAc,EAAEf,2BAAAA;AANG,GAAD,CAFjB,CAAA,CAWJS,GAXI,CAYHO,kDAAkD,CAAC;AACjDC,IAAAA,IAAI,EAAE3B,gBAD2C;AAEjD4B,IAAAA,YAAY,EAAErC,kBAFmC;AAGjD8B,IAAAA,KAAK,EAAE3B,WAH0C;AAIjDmC,IAAAA,MAAM,EAAEjC,aAJyC;AAKjDkC,IAAAA,SAAS,EAAEhC,gBALsC;AAMjD2B,IAAAA,cAAc,EAAEd,oCAAAA;AANiC,GAAD,CAZ/C,CAAP,CAAA;AAqBD;;;;"}