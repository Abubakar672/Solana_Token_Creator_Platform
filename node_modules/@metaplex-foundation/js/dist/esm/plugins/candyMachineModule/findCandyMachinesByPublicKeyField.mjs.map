{"version":3,"file":"findCandyMachinesByPublicKeyField.mjs","sources":["../../../../src/plugins/candyMachineModule/findCandyMachinesByPublicKeyField.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { Operation, OperationHandler, useOperation } from '@/types';\nimport { Metaplex } from '@/Metaplex';\nimport { CandyMachine } from './CandyMachine';\nimport { CandyMachineProgram, parseCandyMachineAccount } from '../../programs';\nimport { UnreachableCaseError } from '../../errors';\n\n// -----------------\n// Operation\n// -----------------\nconst Key = 'FindCandyMachinesByPublicKeyOperation' as const;\n\nexport const findCandyMachinesByPublicKeyFieldOperation =\n  useOperation<FindCandyMachinesByPublicKeyFieldOperation>(Key);\n\nexport type FindCandyMachinesByPublicKeyFieldInput = {\n  type: 'authority' | 'wallet';\n  publicKey: PublicKey;\n};\nexport type FindCandyMachinesByPublicKeyFieldOperation = Operation<\n  typeof Key,\n  FindCandyMachinesByPublicKeyFieldInput,\n  CandyMachine[]\n>;\n\n// -----------------\n// Handler\n// -----------------\nexport const findCandyMachinesByPublicKeyFieldOnChainOperationHandler: OperationHandler<FindCandyMachinesByPublicKeyFieldOperation> =\n  {\n    handle: async (\n      operation: FindCandyMachinesByPublicKeyFieldOperation,\n      metaplex: Metaplex\n    ): Promise<CandyMachine[]> => {\n      const { type, publicKey } = operation.input;\n      const accounts = CandyMachineProgram.accounts(metaplex);\n      let candyMachineQuery;\n      switch (type) {\n        case 'authority':\n          candyMachineQuery =\n            accounts.candyMachineAccountsForAuthority(publicKey);\n          break;\n        case 'wallet':\n          candyMachineQuery = accounts.candyMachineAccountsForWallet(publicKey);\n          break;\n        default:\n          throw new UnreachableCaseError(type);\n      }\n\n      const candyMachineUnparseds = await candyMachineQuery.get();\n      return candyMachineUnparseds.map((unparsedAccount) => {\n        const account = parseCandyMachineAccount(unparsedAccount);\n        return CandyMachine.fromAccount(account, unparsedAccount.data);\n      });\n    },\n  };\n"],"names":["Key","findCandyMachinesByPublicKeyFieldOperation","useOperation","findCandyMachinesByPublicKeyFieldOnChainOperationHandler","handle","operation","metaplex","type","publicKey","input","accounts","CandyMachineProgram","candyMachineQuery","candyMachineAccountsForAuthority","candyMachineAccountsForWallet","UnreachableCaseError","candyMachineUnparseds","get","map","unparsedAccount","account","parseCandyMachineAccount","CandyMachine","fromAccount","data"],"mappings":";;;;;;AAQA;AACA;;AACA,MAAMA,GAAG,GAAG,uCAAZ,CAAA;MAEaC,0CAA0C,GACrDC,YAAY,CAA6CF,GAA7C,EADP;AAaP;AACA;AACA;AACO,MAAMG,wDAAsH,GACjI;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,KAGsB;IAC5B,MAAM;MAAEC,IAAF;AAAQC,MAAAA,SAAAA;KAAcH,GAAAA,SAAS,CAACI,KAAtC,CAAA;AACA,IAAA,MAAMC,QAAQ,GAAGC,mBAAmB,CAACD,QAApB,CAA6BJ,QAA7B,CAAjB,CAAA;AACA,IAAA,IAAIM,iBAAJ,CAAA;;AACA,IAAA,QAAQL,IAAR;AACE,MAAA,KAAK,WAAL;AACEK,QAAAA,iBAAiB,GACfF,QAAQ,CAACG,gCAAT,CAA0CL,SAA1C,CADF,CAAA;AAEA,QAAA,MAAA;;AACF,MAAA,KAAK,QAAL;AACEI,QAAAA,iBAAiB,GAAGF,QAAQ,CAACI,6BAAT,CAAuCN,SAAvC,CAApB,CAAA;AACA,QAAA,MAAA;;AACF,MAAA;AACE,QAAA,MAAM,IAAIO,oBAAJ,CAAyBR,IAAzB,CAAN,CAAA;AATJ,KAAA;;AAYA,IAAA,MAAMS,qBAAqB,GAAG,MAAMJ,iBAAiB,CAACK,GAAlB,EAApC,CAAA;AACA,IAAA,OAAOD,qBAAqB,CAACE,GAAtB,CAA2BC,eAAD,IAAqB;AACpD,MAAA,MAAMC,OAAO,GAAGC,wBAAwB,CAACF,eAAD,CAAxC,CAAA;MACA,OAAOG,YAAY,CAACC,WAAb,CAAyBH,OAAzB,EAAkCD,eAAe,CAACK,IAAlD,CAAP,CAAA;AACD,KAHM,CAAP,CAAA;AAID,GAAA;AAzBH;;;;"}