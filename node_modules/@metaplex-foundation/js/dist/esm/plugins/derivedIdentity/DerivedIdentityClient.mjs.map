{"version":3,"file":"DerivedIdentityClient.mjs","sources":["../../../../src/plugins/derivedIdentity/DerivedIdentityClient.ts"],"sourcesContent":["import { Keypair, PublicKey, Transaction } from '@solana/web3.js';\nimport nacl from 'tweetnacl';\nimport { Buffer } from 'buffer';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  Amount,\n  assertSol,\n  IdentitySigner,\n  KeypairSigner,\n  Signer,\n} from '@/types';\nimport { transferBuilder } from '@/programs';\nimport { UninitializedDerivedIdentityError } from './errors';\n\nexport class DerivedIdentityClient implements IdentitySigner, KeypairSigner {\n  protected readonly metaplex: Metaplex;\n  protected originalSigner: Signer | null = null;\n  protected derivedKeypair: Keypair | null = null;\n\n  constructor(metaplex: Metaplex) {\n    this.metaplex = metaplex;\n  }\n\n  get publicKey(): PublicKey {\n    this.assertInitialized();\n\n    return this.derivedKeypair.publicKey;\n  }\n\n  get secretKey(): Uint8Array {\n    this.assertInitialized();\n\n    return this.derivedKeypair.secretKey;\n  }\n\n  get originalPublicKey(): PublicKey {\n    this.assertInitialized();\n\n    return this.originalSigner.publicKey;\n  }\n\n  async deriveFrom(\n    message: string | Uint8Array,\n    originalSigner?: IdentitySigner\n  ): Promise<void> {\n    this.originalSigner = originalSigner ?? this.metaplex.identity().driver();\n\n    const signature = await this.originalSigner.signMessage(\n      Buffer.from(message)\n    );\n\n    const seeds = nacl.hash(signature).slice(0, 32);\n\n    this.derivedKeypair = Keypair.fromSeed(seeds);\n  }\n\n  async fund(amount: Amount): Promise<void> {\n    this.assertInitialized();\n    assertSol(amount);\n\n    const transfer = transferBuilder({\n      from: this.originalSigner,\n      to: this.derivedKeypair.publicKey,\n      lamports: amount.basisPoints.toNumber(),\n    });\n\n    await this.metaplex.rpc().sendAndConfirmTransaction(transfer);\n  }\n\n  async withdraw(amount: Amount): Promise<void> {\n    this.assertInitialized();\n    assertSol(amount);\n\n    const transfer = transferBuilder({\n      from: this.derivedKeypair,\n      to: this.originalSigner.publicKey,\n      lamports: amount.basisPoints.toNumber(),\n    });\n\n    await this.metaplex.rpc().sendAndConfirmTransaction(transfer);\n  }\n\n  async withdrawAll(): Promise<void> {\n    this.assertInitialized();\n\n    const balance = await this.metaplex\n      .rpc()\n      .getBalance(this.derivedKeypair.publicKey);\n\n    await this.withdraw(balance);\n  }\n\n  close(): void {\n    this.originalSigner = null;\n    this.derivedKeypair = null;\n  }\n\n  async signMessage(message: Uint8Array): Promise<Uint8Array> {\n    return nacl.sign.detached(message, this.secretKey);\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    transaction.partialSign(this);\n\n    return transaction;\n  }\n\n  async signAllTransactions(\n    transactions: Transaction[]\n  ): Promise<Transaction[]> {\n    return Promise.all(\n      transactions.map((transaction) => this.signTransaction(transaction))\n    );\n  }\n\n  verifyMessage(message: Uint8Array, signature: Uint8Array): boolean {\n    return nacl.sign.detached.verify(\n      message,\n      signature,\n      this.publicKey.toBytes()\n    );\n  }\n\n  equals(that: Signer | PublicKey): boolean {\n    if ('publicKey' in that) {\n      that = that.publicKey;\n    }\n\n    return this.publicKey.equals(that);\n  }\n\n  assertInitialized(): asserts this is {\n    originalSigner: Signer;\n    derivedKeypair: Keypair;\n  } {\n    if (this.derivedKeypair === null || this.originalSigner === null) {\n      throw new UninitializedDerivedIdentityError();\n    }\n  }\n}\n"],"names":["DerivedIdentityClient","constructor","metaplex","publicKey","assertInitialized","derivedKeypair","secretKey","originalPublicKey","originalSigner","deriveFrom","message","identity","driver","signature","signMessage","Buffer","from","seeds","nacl","hash","slice","Keypair","fromSeed","fund","amount","assertSol","transfer","transferBuilder","to","lamports","basisPoints","toNumber","rpc","sendAndConfirmTransaction","withdraw","withdrawAll","balance","getBalance","close","sign","detached","signTransaction","transaction","partialSign","signAllTransactions","transactions","Promise","all","map","verifyMessage","verify","toBytes","equals","that","UninitializedDerivedIdentityError"],"mappings":"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"}