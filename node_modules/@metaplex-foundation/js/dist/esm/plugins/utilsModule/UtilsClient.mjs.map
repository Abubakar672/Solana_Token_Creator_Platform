{"version":3,"file":"UtilsClient.mjs","sources":["../../../../src/plugins/utilsModule/UtilsClient.ts"],"sourcesContent":["import type { Metaplex } from '@/Metaplex';\nimport {\n  addAmounts,\n  Amount,\n  lamports,\n  multiplyAmount,\n  subtractAmounts,\n} from '@/types';\n\nconst TRANSACTION_FEE = 5000;\n\nexport class UtilsClient {\n  protected readonly metaplex: Metaplex;\n  protected cachedRentPerEmptyAccount: Amount | null = null;\n  protected cachedRentPerByte: Amount | null = null;\n\n  constructor(metaplex: Metaplex) {\n    this.metaplex = metaplex;\n  }\n\n  async estimate(\n    bytes: number,\n    numberOfAccounts: number = 1,\n    numberOfTransactions: number = 1,\n    useCache = true\n  ): Promise<Amount> {\n    const rent = await this.estimateRent(bytes, numberOfAccounts, useCache);\n    const transactionFees = this.estimateTransactionFee(numberOfTransactions);\n\n    return addAmounts(rent, transactionFees);\n  }\n\n  async estimateRent(\n    bytes: number,\n    numberOfAccounts: number = 1,\n    useCache: boolean = true\n  ): Promise<Amount> {\n    if (\n      !useCache ||\n      this.cachedRentPerEmptyAccount === null ||\n      this.cachedRentPerByte === null\n    ) {\n      const rentFor0Bytes = await this.metaplex.rpc().getRent(0);\n      const rentFor1Byte = await this.metaplex.rpc().getRent(1);\n      this.cachedRentPerEmptyAccount = rentFor0Bytes;\n      this.cachedRentPerByte = subtractAmounts(rentFor1Byte, rentFor0Bytes);\n    }\n\n    const rentForAccounts = multiplyAmount(\n      this.cachedRentPerEmptyAccount,\n      numberOfAccounts\n    );\n    const rentForBytes = multiplyAmount(this.cachedRentPerByte, bytes);\n\n    return addAmounts(rentForAccounts, rentForBytes);\n  }\n\n  estimateTransactionFee(numberOfTransactions: number = 1): Amount {\n    // TODO(loris): Improve with an RPC call to get the current transaction fee.\n    return lamports(numberOfTransactions * TRANSACTION_FEE);\n  }\n}\n"],"names":["TRANSACTION_FEE","UtilsClient","constructor","metaplex","estimate","bytes","numberOfAccounts","numberOfTransactions","useCache","rent","estimateRent","transactionFees","estimateTransactionFee","addAmounts","cachedRentPerEmptyAccount","cachedRentPerByte","rentFor0Bytes","rpc","getRent","rentFor1Byte","subtractAmounts","rentForAccounts","multiplyAmount","rentForBytes","lamports"],"mappings":";;;AASA,MAAMA,eAAe,GAAG,IAAxB,CAAA;AAEO,MAAMC,WAAN,CAAkB;EAKvBC,WAAW,CAACC,QAAD,EAAqB;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,2BAAA,EAHqB,IAGrB,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,mBAAA,EAFa,IAEb,CAAA,CAAA;;IAC9B,IAAKA,CAAAA,QAAL,GAAgBA,QAAhB,CAAA;AACD,GAAA;;AAEa,EAAA,MAARC,QAAQ,CACZC,KADY,EAEZC,gBAAwB,GAAG,CAFf,EAGZC,oBAA4B,GAAG,CAHnB,EAIZC,QAAQ,GAAG,IAJC,EAKK;IACjB,MAAMC,IAAI,GAAG,MAAM,IAAKC,CAAAA,YAAL,CAAkBL,KAAlB,EAAyBC,gBAAzB,EAA2CE,QAA3C,CAAnB,CAAA;AACA,IAAA,MAAMG,eAAe,GAAG,IAAA,CAAKC,sBAAL,CAA4BL,oBAA5B,CAAxB,CAAA;AAEA,IAAA,OAAOM,UAAU,CAACJ,IAAD,EAAOE,eAAP,CAAjB,CAAA;AACD,GAAA;;EAEiB,MAAZD,YAAY,CAChBL,KADgB,EAEhBC,gBAAwB,GAAG,CAFX,EAGhBE,QAAiB,GAAG,IAHJ,EAIC;AACjB,IAAA,IACE,CAACA,QAAD,IACA,IAAA,CAAKM,yBAAL,KAAmC,IADnC,IAEA,IAAKC,CAAAA,iBAAL,KAA2B,IAH7B,EAIE;MACA,MAAMC,aAAa,GAAG,MAAM,IAAKb,CAAAA,QAAL,CAAcc,GAAd,EAAoBC,CAAAA,OAApB,CAA4B,CAA5B,CAA5B,CAAA;MACA,MAAMC,YAAY,GAAG,MAAM,IAAKhB,CAAAA,QAAL,CAAcc,GAAd,EAAoBC,CAAAA,OAApB,CAA4B,CAA5B,CAA3B,CAAA;MACA,IAAKJ,CAAAA,yBAAL,GAAiCE,aAAjC,CAAA;AACA,MAAA,IAAA,CAAKD,iBAAL,GAAyBK,eAAe,CAACD,YAAD,EAAeH,aAAf,CAAxC,CAAA;AACD,KAAA;;IAED,MAAMK,eAAe,GAAGC,cAAc,CACpC,KAAKR,yBAD+B,EAEpCR,gBAFoC,CAAtC,CAAA;IAIA,MAAMiB,YAAY,GAAGD,cAAc,CAAC,KAAKP,iBAAN,EAAyBV,KAAzB,CAAnC,CAAA;AAEA,IAAA,OAAOQ,UAAU,CAACQ,eAAD,EAAkBE,YAAlB,CAAjB,CAAA;AACD,GAAA;;AAEDX,EAAAA,sBAAsB,CAACL,oBAA4B,GAAG,CAAhC,EAA2C;AAC/D;AACA,IAAA,OAAOiB,QAAQ,CAACjB,oBAAoB,GAAGP,eAAxB,CAAf,CAAA;AACD,GAAA;;AAjDsB;;;;"}