{"version":3,"file":"Signer.mjs","sources":["../../../src/types/Signer.ts"],"sourcesContent":["import { PublicKey, Transaction } from '@solana/web3.js';\n\nexport type Signer = KeypairSigner | IdentitySigner;\n\nexport type KeypairSigner = {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n};\n\nexport type IdentitySigner = {\n  publicKey: PublicKey;\n  signMessage(message: Uint8Array): Promise<Uint8Array>;\n  signTransaction(transaction: Transaction): Promise<Transaction>;\n  signAllTransactions(transactions: Transaction[]): Promise<Transaction[]>;\n};\n\nexport const isKeypairSigner = (signer: Signer): signer is KeypairSigner => {\n  return 'secretKey' in signer && signer.secretKey != null;\n};\n\nexport const isIdentitySigner = (signer: Signer): signer is IdentitySigner => {\n  return !isKeypairSigner(signer);\n};\n\nexport interface SignerHistogram {\n  all: Signer[];\n  keypairs: KeypairSigner[];\n  identities: IdentitySigner[];\n}\n\nexport const getSignerHistogram = (signers: Signer[]) =>\n  signers.reduce(\n    (signers: SignerHistogram, signer: Signer) => {\n      const duplicateIndex = signers.all.findIndex(({ publicKey }) =>\n        publicKey.equals(signer.publicKey)\n      );\n      const duplicate = signers.all[duplicateIndex] ?? null;\n      const duplicateIsIdentity = duplicate\n        ? isIdentitySigner(duplicate)\n        : false;\n      const signerIsIdentity = isIdentitySigner(signer);\n\n      if (!duplicate) {\n        signers.all.push(signer);\n        signerIsIdentity\n          ? signers.identities.push(signer)\n          : signers.keypairs.push(signer);\n      } else if (duplicateIsIdentity && !signerIsIdentity) {\n        // Prefer keypair than identity signer as it requires less user interactions.\n        const duplicateIdentitiesIndex = signers.identities.findIndex(\n          ({ publicKey }) => publicKey.equals(signer.publicKey)\n        );\n        delete signers.all[duplicateIndex];\n        delete signers.identities[duplicateIdentitiesIndex];\n        signers.all.push(signer);\n        signers.keypairs.push(signer);\n      }\n\n      return signers;\n    },\n    { all: [], keypairs: [], identities: [] }\n  );\n"],"names":["isKeypairSigner","signer","secretKey","isIdentitySigner","getSignerHistogram","signers","reduce","duplicateIndex","all","findIndex","publicKey","equals","duplicate","duplicateIsIdentity","signerIsIdentity","push","identities","keypairs","duplicateIdentitiesIndex"],"mappings":"AAgBaA,MAAAA,eAAe,GAAIC,MAAD,IAA6C;AAC1E,EAAA,OAAO,eAAeA,MAAf,IAAyBA,MAAM,CAACC,SAAP,IAAoB,IAApD,CAAA;AACD,EAFM;AAIMC,MAAAA,gBAAgB,GAAIF,MAAD,IAA8C;AAC5E,EAAA,OAAO,CAACD,eAAe,CAACC,MAAD,CAAvB,CAAA;AACD,EAFM;AAUMG,MAAAA,kBAAkB,GAAIC,OAAD,IAChCA,OAAO,CAACC,MAAR,CACE,CAACD,OAAD,EAA2BJ,MAA3B,KAA8C;AAAA,EAAA,IAAA,qBAAA,CAAA;;EAC5C,MAAMM,cAAc,GAAGF,OAAO,CAACG,GAAR,CAAYC,SAAZ,CAAsB,CAAC;AAAEC,IAAAA,SAAAA;GAAH,KAC3CA,SAAS,CAACC,MAAV,CAAiBV,MAAM,CAACS,SAAxB,CADqB,CAAvB,CAAA;EAGA,MAAME,SAAS,4BAAGP,OAAO,CAACG,GAAR,CAAYD,cAAZ,CAAH,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAkC,IAAjD,CAAA;EACA,MAAMM,mBAAmB,GAAGD,SAAS,GACjCT,gBAAgB,CAACS,SAAD,CADiB,GAEjC,KAFJ,CAAA;AAGA,EAAA,MAAME,gBAAgB,GAAGX,gBAAgB,CAACF,MAAD,CAAzC,CAAA;;EAEA,IAAI,CAACW,SAAL,EAAgB;AACdP,IAAAA,OAAO,CAACG,GAAR,CAAYO,IAAZ,CAAiBd,MAAjB,CAAA,CAAA;AACAa,IAAAA,gBAAgB,GACZT,OAAO,CAACW,UAAR,CAAmBD,IAAnB,CAAwBd,MAAxB,CADY,GAEZI,OAAO,CAACY,QAAR,CAAiBF,IAAjB,CAAsBd,MAAtB,CAFJ,CAAA;AAGD,GALD,MAKO,IAAIY,mBAAmB,IAAI,CAACC,gBAA5B,EAA8C;AACnD;IACA,MAAMI,wBAAwB,GAAGb,OAAO,CAACW,UAAR,CAAmBP,SAAnB,CAC/B,CAAC;AAAEC,MAAAA,SAAAA;KAAH,KAAmBA,SAAS,CAACC,MAAV,CAAiBV,MAAM,CAACS,SAAxB,CADY,CAAjC,CAAA;AAGA,IAAA,OAAOL,OAAO,CAACG,GAAR,CAAYD,cAAZ,CAAP,CAAA;AACA,IAAA,OAAOF,OAAO,CAACW,UAAR,CAAmBE,wBAAnB,CAAP,CAAA;AACAb,IAAAA,OAAO,CAACG,GAAR,CAAYO,IAAZ,CAAiBd,MAAjB,CAAA,CAAA;AACAI,IAAAA,OAAO,CAACY,QAAR,CAAiBF,IAAjB,CAAsBd,MAAtB,CAAA,CAAA;AACD,GAAA;;AAED,EAAA,OAAOI,OAAP,CAAA;AACD,CA5BH,EA6BE;AAAEG,EAAAA,GAAG,EAAE,EAAP;AAAWS,EAAAA,QAAQ,EAAE,EAArB;AAAyBD,EAAAA,UAAU,EAAE,EAAA;AAArC,CA7BF;;;;"}