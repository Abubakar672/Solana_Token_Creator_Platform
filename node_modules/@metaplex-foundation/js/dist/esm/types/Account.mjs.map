{"version":3,"file":"Account.mjs","sources":["../../../src/types/Account.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { Buffer } from 'buffer';\nimport { UnexpectedAccountError } from '@/errors';\n\nexport type Account<T> = Readonly<{\n  publicKey: PublicKey;\n  executable: boolean;\n  owner: PublicKey;\n  lamports: number;\n  data: T;\n  rentEpoch?: number;\n}>;\n\nexport type MaybeAccount<T> =\n  | (Account<T> & { exists: true })\n  | { publicKey: PublicKey; exists: false };\n\nexport type UnparsedAccount = Account<Buffer>;\nexport type UnparsedMaybeAccount = MaybeAccount<Buffer>;\n\nexport type AccountParser<T> = {\n  name: string;\n  deserialize: (data: Buffer, offset?: number) => [T, number];\n};\n\nexport type AccountParsingFunction<T> = {\n  (unparsedAccount: UnparsedAccount): Account<T>;\n  (unparsedAccount: UnparsedMaybeAccount): MaybeAccount<T>;\n};\n\nexport function parseAccount<T>(\n  account: UnparsedMaybeAccount,\n  parser: AccountParser<T>\n): MaybeAccount<T>;\nexport function parseAccount<T>(\n  account: UnparsedAccount,\n  parser: AccountParser<T>\n): Account<T>;\nexport function parseAccount<T>(\n  account: UnparsedAccount | UnparsedMaybeAccount,\n  parser: AccountParser<T>\n): Account<T> | MaybeAccount<T> {\n  if ('exists' in account && !account.exists) {\n    return account;\n  }\n  return getAccountParsingFunction(parser)(account);\n}\n\nexport function getAccountParsingFunction<T>(\n  parser: AccountParser<T>\n): AccountParsingFunction<T> {\n  function parse(account: UnparsedAccount): Account<T>;\n  function parse(account: UnparsedMaybeAccount): MaybeAccount<T>;\n  function parse(\n    account: UnparsedAccount | UnparsedMaybeAccount\n  ): Account<T> | MaybeAccount<T> {\n    if ('exists' in account && !account.exists) {\n      return account;\n    }\n\n    try {\n      const data: T = parser.deserialize(account.data)[0];\n      return { ...account, data };\n    } catch (error) {\n      throw new UnexpectedAccountError(\n        account.publicKey,\n        parser.name,\n        error as Error\n      );\n    }\n  }\n\n  return parse;\n}\n"],"names":["parseAccount","account","parser","exists","getAccountParsingFunction","parse","data","deserialize","error","UnexpectedAccountError","publicKey","name"],"mappings":";;AAsCO,SAASA,YAAT,CACLC,OADK,EAELC,MAFK,EAGyB;AAC9B,EAAA,IAAI,YAAYD,OAAZ,IAAuB,CAACA,OAAO,CAACE,MAApC,EAA4C;AAC1C,IAAA,OAAOF,OAAP,CAAA;AACD,GAAA;;AACD,EAAA,OAAOG,yBAAyB,CAACF,MAAD,CAAzB,CAAkCD,OAAlC,CAAP,CAAA;AACD,CAAA;AAEM,SAASG,yBAAT,CACLF,MADK,EAEsB;EAG3B,SAASG,KAAT,CACEJ,OADF,EAEgC;AAC9B,IAAA,IAAI,YAAYA,OAAZ,IAAuB,CAACA,OAAO,CAACE,MAApC,EAA4C;AAC1C,MAAA,OAAOF,OAAP,CAAA;AACD,KAAA;;IAED,IAAI;MACF,MAAMK,IAAO,GAAGJ,MAAM,CAACK,WAAP,CAAmBN,OAAO,CAACK,IAA3B,CAAiC,CAAA,CAAjC,CAAhB,CAAA;MACA,OAAO,EAAE,GAAGL,OAAL;AAAcK,QAAAA,IAAAA;OAArB,CAAA;KAFF,CAGE,OAAOE,KAAP,EAAc;AACd,MAAA,MAAM,IAAIC,sBAAJ,CACJR,OAAO,CAACS,SADJ,EAEJR,MAAM,CAACS,IAFH,EAGJH,KAHI,CAAN,CAAA;AAKD,KAAA;AACF,GAAA;;AAED,EAAA,OAAOH,KAAP,CAAA;AACD;;;;"}