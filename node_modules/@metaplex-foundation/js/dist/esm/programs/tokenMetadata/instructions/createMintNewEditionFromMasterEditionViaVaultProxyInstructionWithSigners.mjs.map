{"version":3,"file":"createMintNewEditionFromMasterEditionViaVaultProxyInstructionWithSigners.mjs","sources":["../../../../../src/programs/tokenMetadata/instructions/createMintNewEditionFromMasterEditionViaVaultProxyInstructionWithSigners.ts"],"sourcesContent":["import BN from 'bn.js';\nimport { PublicKey } from '@solana/web3.js';\nimport { createMintNewEditionFromMasterEditionViaVaultProxyInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { Signer } from '@/types';\nimport { InstructionWithSigners } from '@/utils';\n\nexport interface CreateMintNewEditionFromMasterEditionViaVaultProxyInstructionWithSignersParams {\n  edition: number | BN;\n  newMetadata: PublicKey;\n  newEdition: PublicKey;\n  masterEdition: PublicKey;\n  newMint: Signer;\n  editionMarkPda: PublicKey;\n  newMintAuthority: Signer;\n  payer: Signer;\n  vaultAuthority: Signer;\n  safetyDepositStore: PublicKey;\n  safetyDepositBox: PublicKey;\n  vault: PublicKey;\n  newMetadataUpdateAuthority: PublicKey;\n  metadata: PublicKey;\n  tokenVaultProgram?: PublicKey;\n  instructionKey?: string;\n}\n\nexport const createMintNewEditionFromMasterEditionViaVaultProxyInstructionWithSigners =\n  (\n    params: CreateMintNewEditionFromMasterEditionViaVaultProxyInstructionWithSignersParams\n  ): InstructionWithSigners => {\n    const {\n      edition,\n      newMetadata,\n      newEdition,\n      masterEdition,\n      newMint,\n      editionMarkPda,\n      newMintAuthority,\n      payer,\n      vaultAuthority,\n      safetyDepositStore,\n      safetyDepositBox,\n      vault,\n      newMetadataUpdateAuthority,\n      metadata,\n      tokenVaultProgram = new PublicKey(\n        'vau1zxA2LbssAUEF7Gpw91zMM1LvXrvpzJtmZ58rPsn'\n      ),\n      instructionKey = 'mintNewEditionFromMasterEditionViaVaultProxy',\n    } = params;\n\n    return {\n      instruction:\n        createMintNewEditionFromMasterEditionViaVaultProxyInstruction(\n          {\n            newMetadata,\n            newEdition,\n            masterEdition,\n            newMint: newMint.publicKey,\n            editionMarkPda,\n            newMintAuthority: newMintAuthority.publicKey,\n            payer: payer.publicKey,\n            vaultAuthority: vaultAuthority.publicKey,\n            safetyDepositStore,\n            safetyDepositBox,\n            vault,\n            newMetadataUpdateAuthority,\n            metadata,\n            tokenVaultProgram,\n          },\n          { mintNewEditionFromMasterEditionViaTokenArgs: { edition } }\n        ),\n      signers: [newMint, newMintAuthority, payer, vaultAuthority],\n      key: instructionKey,\n    };\n  };\n"],"names":["createMintNewEditionFromMasterEditionViaVaultProxyInstructionWithSigners","params","edition","newMetadata","newEdition","masterEdition","newMint","editionMarkPda","newMintAuthority","payer","vaultAuthority","safetyDepositStore","safetyDepositBox","vault","newMetadataUpdateAuthority","metadata","tokenVaultProgram","PublicKey","instructionKey","instruction","createMintNewEditionFromMasterEditionViaVaultProxyInstruction","publicKey","mintNewEditionFromMasterEditionViaTokenArgs","signers","key"],"mappings":";;;AAyBaA,MAAAA,wEAAwE,GAEjFC,MADF,IAE6B;EAC3B,MAAM;IACJC,OADI;IAEJC,WAFI;IAGJC,UAHI;IAIJC,aAJI;IAKJC,OALI;IAMJC,cANI;IAOJC,gBAPI;IAQJC,KARI;IASJC,cATI;IAUJC,kBAVI;IAWJC,gBAXI;IAYJC,KAZI;IAaJC,0BAbI;IAcJC,QAdI;AAeJC,IAAAA,iBAAiB,GAAG,IAAIC,SAAJ,CAClB,6CADkB,CAfhB;AAkBJC,IAAAA,cAAc,GAAG,8CAAA;AAlBb,GAAA,GAmBFjB,MAnBJ,CAAA;EAqBA,OAAO;IACLkB,WAAW,EACTC,6DAA6D,CAC3D;MACEjB,WADF;MAEEC,UAFF;MAGEC,aAHF;MAIEC,OAAO,EAAEA,OAAO,CAACe,SAJnB;MAKEd,cALF;MAMEC,gBAAgB,EAAEA,gBAAgB,CAACa,SANrC;MAOEZ,KAAK,EAAEA,KAAK,CAACY,SAPf;MAQEX,cAAc,EAAEA,cAAc,CAACW,SARjC;MASEV,kBATF;MAUEC,gBAVF;MAWEC,KAXF;MAYEC,0BAZF;MAaEC,QAbF;AAcEC,MAAAA,iBAAAA;AAdF,KAD2D,EAiB3D;AAAEM,MAAAA,2CAA2C,EAAE;AAAEpB,QAAAA,OAAAA;AAAF,OAAA;AAA/C,KAjB2D,CAF1D;IAqBLqB,OAAO,EAAE,CAACjB,OAAD,EAAUE,gBAAV,EAA4BC,KAA5B,EAAmCC,cAAnC,CArBJ;AAsBLc,IAAAA,GAAG,EAAEN,cAAAA;GAtBP,CAAA;AAwBD;;;;"}