{"version":3,"file":"assert.mjs","sources":["../../../src/utils/assert.ts"],"sourcesContent":["/**\n * Error indicating that an assertion failed.\n */\nexport class AssertionError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AssertionError';\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\n/**\n * Assserts that the provided condition is true.\n */\nexport default function assert(\n  condition: boolean,\n  message?: string\n): asserts condition {\n  if (!condition) {\n    throw new AssertionError(message ?? 'Assertion failed');\n  }\n}\n\n/**\n * Asserts that both values are strictly equal.\n */\nassert.equal = function assertEqual<T>(\n  actual: unknown,\n  expected: T,\n  message?: string\n): asserts actual is T {\n  if (actual !== expected) {\n    throw new AssertionError((message ?? '') + ` ${actual} !== ${expected}`);\n  }\n};\n"],"names":["AssertionError","Error","constructor","message","name","captureStackTrace","assert","condition","equal","assertEqual","actual","expected"],"mappings":"AAAA;AACA;AACA;AACO,MAAMA,cAAN,SAA6BC,KAA7B,CAAmC;EACxCC,WAAW,CAACC,OAAD,EAAkB;AAC3B,IAAA,KAAA,CAAMA,OAAN,CAAA,CAAA;IACA,IAAKC,CAAAA,IAAL,GAAY,gBAAZ,CAAA;;IACA,IAAIH,KAAK,CAACI,iBAAV,EAA6B;AAC3BJ,MAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKH,WAAnC,CAAA,CAAA;AACD,KAAA;AACF,GAAA;;AAPuC,CAAA;AAU1C;AACA;AACA;;AACe,SAASI,MAAT,CACbC,SADa,EAEbJ,OAFa,EAGM;EACnB,IAAI,CAACI,SAAL,EAAgB;IACd,MAAM,IAAIP,cAAJ,CAAmBG,OAAnB,KAAA,IAAA,IAAmBA,OAAnB,KAAmBA,KAAAA,CAAAA,GAAAA,OAAnB,GAA8B,kBAA9B,CAAN,CAAA;AACD,GAAA;AACF,CAAA;AAED;AACA;AACA;;AACAG,MAAM,CAACE,KAAP,GAAe,SAASC,WAAT,CACbC,MADa,EAEbC,QAFa,EAGbR,OAHa,EAIQ;EACrB,IAAIO,MAAM,KAAKC,QAAf,EAAyB;AACvB,IAAA,MAAM,IAAIX,cAAJ,CAAmB,CAACG,OAAD,aAACA,OAAD,KAAA,KAAA,CAAA,GAACA,OAAD,GAAY,EAAZ,IAAmB,CAAA,CAAA,EAAGO,MAAO,CAAOC,KAAAA,EAAAA,QAAS,EAAhE,CAAN,CAAA;AACD,GAAA;AACF,CARD;;;;"}