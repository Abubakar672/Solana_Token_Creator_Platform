{"version":3,"file":"common.mjs","sources":["../../../src/utils/common.ts"],"sourcesContent":["import mime from 'mime';\n\n// eslint-disable-next-line no-control-regex\nexport const removeEmptyChars = (value: string) => value.replace(/\\u0000/g, '');\n\nexport const padEmptyChars = (value: string, chars: number) =>\n  value.padEnd(chars, '\\u0000');\n\nexport const tryOr = <T, U>(callback: () => T, defaultValue: U): T | U => {\n  try {\n    return callback();\n  } catch (error) {\n    return defaultValue;\n  }\n};\n\nexport const tryOrNull = <T>(cb: () => T) => tryOr(cb, null);\n\nexport const chunk = <T>(array: T[], chunkSize: number): T[][] =>\n  array.reduce((accumulator, item, index) => {\n    const chunkIndex = Math.floor(index / chunkSize);\n\n    if (!accumulator[chunkIndex]) {\n      accumulator[chunkIndex] = [];\n    }\n\n    accumulator[chunkIndex].push(item);\n\n    return accumulator;\n  }, [] as T[][]);\n\nexport const zipMap = <T, U, V>(\n  left: T[],\n  right: U[],\n  fn: (t: T, u: U | null, i: number) => V\n): V[] => left.map((t: T, index) => fn(t, right?.[index] ?? null, index));\n\nexport const randomStr = (\n  length: number = 20,\n  alphabet: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n) => {\n  let result = '';\n  const alphabetLength = alphabet.length;\n  for (var i = 0; i < length; i++) {\n    result += alphabet.charAt(Math.floor(Math.random() * alphabetLength));\n  }\n\n  return result;\n};\n\nexport const getContentType = (fileName: string): string | null =>\n  mime.getType(fileName);\n\nexport const getExtension = (fileName: string): string | null => {\n  const lastDotIndex = fileName.lastIndexOf('.');\n\n  return lastDotIndex < 0 ? null : fileName.slice(lastDotIndex + 1);\n};\n\nexport type WalkOptions = {\n  sortObjectKeys?: boolean;\n};\n\nexport const walk = (\n  parent: any,\n  cb: (\n    next: (child: any) => void,\n    value: any,\n    key: any,\n    parent: any\n  ) => unknown,\n  options?: WalkOptions\n): void => {\n  const recursiveWalk = (child: any) => walk(child, cb, options);\n\n  if (parent && Array.isArray(parent)) {\n    parent.forEach((child, index) => {\n      cb(recursiveWalk, child, index, parent);\n    });\n  } else if (parent && typeof parent === 'object') {\n    const keys = Object.keys(parent);\n\n    if (options?.sortObjectKeys ?? true) {\n      keys.sort();\n    }\n\n    keys.forEach((key) => {\n      const child = parent[key];\n      cb(recursiveWalk, child, key, parent);\n    });\n  }\n};\n"],"names":["removeEmptyChars","value","replace","padEmptyChars","chars","padEnd","tryOr","callback","defaultValue","error","tryOrNull","cb","chunk","array","chunkSize","reduce","accumulator","item","index","chunkIndex","Math","floor","push","zipMap","left","right","fn","map","t","randomStr","length","alphabet","result","alphabetLength","i","charAt","random","getContentType","fileName","mime","getType","getExtension","lastDotIndex","lastIndexOf","slice","walk","parent","options","recursiveWalk","child","Array","isArray","forEach","keys","Object","sortObjectKeys","sort","key"],"mappings":"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"}